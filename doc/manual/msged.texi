\input texinfo   @c -*-texinfo-*-

@c %**start of header
@setfilename msged.info
@settitle MsgEd TE 05 - A Public Domain Fidonet Message Editor
@setchapternewpage odd
@set MSGED MsgEd TE
@set VERSION 05
@set EDITION 02
@defindex kr
@defindex ke
@c %**end of header

@iftex
@parindent=0pt
@end iftex
@iftex
@afourpaper
@end iftex


@titlepage
@title @value{MSGED} @value{VERSION} Manual
@subtitle A Public Domain Fidonet Message Reader/Editor
@author Tobias Ernst @@ 2:2476/418.0
@page
@c{empty page to get the page numbering right}
@end titlepage

@ifinfo
@node Top, Overview, (dir), (dir)
@top @value{MSGED}
This document describes @value{MSGED} @value{VERSION}, a Public Domain
Fidonet Message Reader and Editor Software for OS/2, Windows, DOS and Unix.

@menu
* Overview::                    What is @value{MSGED}?
* Installation::                Installation and Release Notes. @emph{Read this!}
* Introduction::                Using @value{MSGED}. A guide for beginners. 
* Advanced Concepts::           Advanced features and concepts.
* Keyboard Reference::          How to use and change the key combinations.
* Configuration Reference::     Explanation of the configuration file.
* Compiling::                   Appendix: How to compile the source code.
* Concept Index::               General Index
* Keyword Index::               Configuration File Keywords Index
@end menu
@end ifinfo

@node Overview, Installation, Top, Top
@chapter An Overview on @value{MSGED} @value{VERSION}.

@value{MSGED} is a message reader and editor software for Fidonet (and
compatible) network(s), supporting Squish, Hudson and Fido *.MSG message
bases. This program is released to the public domain.  There are absolutely
no usage or distribution restrictions. This is truely free software.

@value{MSGED} emerged from MsgEd, a public domain fidonet message reader
initially written by Jim Nutt and thereafter maintained by numerous people
(among them Paul Edwards, Andrew Clarke, and Kim Lykkegaard, who is currently
maintaing MsgEd). @value{MSGED} is being developed by Tobias Ernst. You can
reach me at 2:2476/418 or via e-mail at tobi@@bland.fido.de.

@value{MSGED} differs from the mainstream MsgEd in that it tries to support a
vast number of platforms by employing portable software design
techniques. It is my policy to release executables and source code at the
same time for all supported platforms, among them OS/2, Unix (Linux and
FreeBSD as well as commercial Unix systems), Windows NT and 16-bit DOS.

@value{MSGED} is developed with the GNU C compiler and GNU boundary checking,
which assures high program stability. @value{MSGED} also has some features
that the mainstream MsgEd currently has not, like full "seamless" internet
gateway support for Fidogate and simliar gateway programs.

In developing @value{MSGED}, I am in contact with the mainstream MsgEd
developer team, so most features they introduce will be migrated to
@value{MSGED}, and most features that I introduce in @value{MSGED} will
possibly also be migrated to the mains team MsgEd over time. There is no
"rivalry" between Kim and me, it is just that we have a little different
goals in mind and therefore decided to maintain separate streams of MsgEd.

If you like @value{MSGED} and start to use it as your everyday Fidonet
editor, please drop me a note saying that you do so at @samp{Tobias Ernst @
2:2476/418} or at @samp{tobi@@bland.fido.de}. I originally started to work on
@value{MSGED} to create a Fidonet editor that fulfilled some special personal
needs of mine. Since then, things evolved and I saw myself doing a lot of
work that I would not have done just for my own needs. Writing this
documentation is one such example, porting to Windows NT another. If I
continue to do this work in the future and add new features to @value{MSGED}
will strongly depend on how much feedback I receive from users that like and
use @value{MSGED}. Therefore: Don't be shy - drop me a mail. :-)

At this place, I also would like to express my thankfulness to all people
that helped making @value{MSGED} what it is now, that being all the
developers that haved worked on the sources in the past, the team that makes
MsgEd 4.30, and all the beta testers that used the Pre-Release of
@value{MSGED} @value{VERSION}.

@node Installation, Introduction, Overview, Top
@chapter Installation Procedures and Release Notes
This chapter provides you with information that is necessary to successfully
install and use @value{MSGED}. Part of this chapter applies to all versions
of @value{MSGED}, while some sections only apply to a particular operating
system. If this is the case, the particular operating system is mentioned in
the section title.

You should carefully read this chapter because it might save you from a lot
of pain, especially (but not only) when using @value{MSGED} in networked or
UNIX environments.

@menu
* Distribution Archives::       Which archives do I need?
* Non-Unix Installation::       Installing @value{MSGED} on OS/2, DOS or Windows
* UNIX installation::           Installing @value{MSGED} on Linux or Unix
* Network Notes::               Using Fido software in a network environment.
* Known Bugs::                  Known bugs and shortcomings of @value{MSGED}
* Contact::                     Contacting the author, support, bug reports.
@end menu

@node Distribution Archives, Non-Unix Installation, Installation, Installation
@section Which Distribution Archives do I need?
@value{MSGED} @value{VERSION} is shipped in various distribution
archives. This section describes the contents of each. You normally do only
need one of these files containing the executable and documentation for your
platform, and maybe the file that contains the printable version of the
documentation.

@table @file
@item MSGTE5_O.ZIP
This archive contains an OS/2 executable, sample configuration files and a
manual in OS/2 INF format.

@item MSGTE5_D.ZIP
This archive contains a 16-Bit DOS executable, sample configuration files and
a manual in plain text format.

@item MSGTE5_3.ZIP
This archive contains a 32-Bit DPMI DOS executable, sample configuration
files and a manual in plain text format.

@item MSGTE5_W.ZIP
This archive contains a Windows 32 bit executable that has been tested on
Windows NT, but should also work with Windows 95 and 98, sample configuration
files and a manual in HTML format.

@item MSGTE5_L.ZIP
This archive contains a statically linked, pre-compiled Linux executable,
sample configuration files and a manual in HTML format.

@item MSGTE5_M.ZIP
This archive contains the manual for @value{MSGED} in Postscript and in HTML
format. If you intend to print the documentation of @value{MSGED}, then you
should get this file and use the Postscript version, because printing the
Postscript version of the manual (by copying it to the printer port of a
postscript capable printer, or by using Ghostscript) will result in the best
possible output that looks much nicer than if you would print the HTML or
plain text documentations.

@item MSGTE5_S.ZIP
This archive contains the complete C source code for @value{MSGED},
out-of-the-box makefiles for building @value{MSGED} on DOS, OS/2, Windows,
and almost every imaginable Unix-like system (tested systems include Linux,
FreeBSD and IBM AIX), sample configuration files, and the texinfo source code
for the manual that can be used to build the manual in OS/2 INF, HTML, GNU
info or DVI format. You will also need @file{SMAPISS.ZIP} if you intend to
compile @value{MSGED} yourself.

@item SMAPISS.ZIP
This archive contains a snapshot of the source code level of the SMAPI
(alternative Squish Message API) that has been used to compile the binary
versions of @value{MSGED} @value{VERSION}. Note that bug reports for
@value{MSGED} are only considered if you used exactly this version of the
SMAPI to compile @value{MSGED} or a newer version obtained from the Linux
Fidosoft Project. All other versions of the SMAPI (that is @file{SMAPI11.ZIP}
through @file{SMAPI15.ZIP}) have severe bugs that make it impossible for this
version of @value{MSGED} to function properly under all circumstances.

@end table

@emph{Attention:} Most of these ZIP-files contain subdirectories, so you
should use the @samp{-d} option when unzipping them!

@node Non-Unix Installation, UNIX installation, Distribution Archives, Installation
@section Installation on OS/2, DOS or Windows

This section provides guidelines and additional notes for installing
@value{MSGED} on OS/2, DOS or Windows.

@menu
* Non-Unix Installation Guide::  
* 16-Bit DOS Release Notes::    
* 32 Bit DOS Release Notes::    
* OS/2 Release Notes::          
* Windows Release Notes::       
@end menu

@node Non-Unix Installation Guide, 16-Bit DOS Release Notes, Non-Unix Installation, Non-Unix Installation
@subsection Installation Procedure
@enumerate
@item
Obtain the distribution archive that contains the executable for your
platform. (You might already have done this).

@item
Create a subdirectory like for example @file{C:\MSGED}, change into this
subdiretory, and unzip the distribution archive. Be sure to use the @samp{-d}
option when unzipping the archive, because some archives contain
subdirectories. (You might already have done this).

@item
Find out which codepage you are using by issueing the @code{CHCP} command. If
it is 437, you do not have to take any action. If it is 850, you have to
rename @file{????maps.dat} to @file{????maps.437} (for backup purposes), and
then you must rename @file{????maps.850} to
@file{????maps.dat}. (Alternatively, you could consider writing a batch file
that first calls @code{CHCP 437} and then calls the @value{MSGED}
executable.)

@item
Rename the file @file{sample.cfg} to @file{msged.cfg} and modify it according
to your needs with your favoruite text editor. @xref{Configuration Reference}
for detailed descriptions of each keyword that can be used in this file.

@item
You should now refer to the platform specific release notes found below before trying to start @value{MSGED}. They can save you from a lot
of headaches ;-).
@c FIXME add xrefs

@item
Optionally create an icon on your desktop or a batch file that starts the
proper executable (@file{MSGEDP.EXE} for OS/2, @file{MSGEDNT.EXE} for Windows
95/98/NT, @file{MSGED.EXE} for DOS, or @file{MSGED32.EXE} for 32-Bit DOS with
DOS extender) with the directory you created (@file{C:\MSGED} in the example
above) as working directory).

@item
Start @value{MSGED}.
@end enumerate

@node 16-Bit DOS Release Notes, 32 Bit DOS Release Notes, Non-Unix Installation Guide, Non-Unix Installation
@subsection Release Notes for the 16-Bit DOS version (@file{MSGED.EXE})
@itemize @bullet
@item
The 16 bit DOS version cannot handle squish message areas where the
@file{.SQI} file is larger than 64k. This limits the size of a message area
to about 5000 messages. If this is a problem to you, you should use the 32
bit DOS DPMI version instead.

@item
The 16 bit DOS version has been compiled with Borland C 3.1.

@end itemize

@node 32 Bit DOS Release Notes, OS/2 Release Notes, 16-Bit DOS Release Notes, Non-Unix Installation
@subsection Release Notes for the 32 Bit DOS version (@file{MSGED32.EXE})
@itemize @bullet
@item
The 32 bit DOS version should be used when the 16 bit DOS version runs out of
conventional memory (which is very unlikely to happen) or if you want to use
message areas with more than 5000 messages in them. In all other cases, the
16 bit version is the better choice because it uses less memory

@item
If you have Windows 95 or Windows NT, you should use the Windows NT
executable rather than the 32 Bit DOS executable. On Windows 95, the reason
is that the Windows 95 DPMI server is a little buggy, and on Windows NT, the
native NT version is much faster than the DOS version. - The 32 Bit DOS
Version is primarily targeted on environments like DESQview, plain DOS or
Windows 3.1.

@item
The 32 bit DOS version requries a functional DPMI server to run. Valid DPMI
servers include the Windows and OS/2 DOS box, Quarterdeck QDPMI, and others.

@item
In case you are running plain DOS without any DPMI server, @file{CWSDPMI.EXE}
is shipped in the distribution archive. Simply but it in the same path where
you put @file{MSGED32.EXE}, and it will act as an DPMI server as long as no
other one is installed already. Please note that CWSDPMI is not a public
domain program. It is licensed under the GNU Public License instead. You can
obtain the full source code for CWSDPMI and a copy of the GNU license from
@url{ftp.simtel.net/pub/simtelnet/djgpp/v2misc}.

@item
The 32 bit DOS version has been compiled using the DJGPP GNU compiler.

@end itemize

@node OS/2 Release Notes, Windows Release Notes, 32 Bit DOS Release Notes, Non-Unix Installation
@subsection Release Notes for the 32 Bit OS/2 version (@file{MSGEDP.EXE})
@itemize @bullet
@item
The OS/2 version has been compiled with the EMX GNU compiler, but does no
longer require the EMX runtime. It is a standalone OS/2 executable.

@end itemize

@node Windows Release Notes,  , OS/2 Release Notes, Non-Unix Installation
@subsection Release Notes for the 32 Bit Windows version (@file{MSGEDNT.EXE})
@itemize @bullet
@item
The Windows version is a 32 bit executable designed for Windows NT. Although
it has only been tested on Windows NT, it should also work on Windows 95 and
Windows 98.

@item
The Windows version presently does not support mouse control (even though the
mouse cursor is visible).

@item
The Windows version has been compiled with the RSXNT GNU compiler. It is a
standalone executable that does not require any runtime DLLs.

@end itemize


@node UNIX installation, Network Notes, Non-Unix Installation, Installation
@section Installation on Linux, FreeBSD, or other Unixes
This section provides information on installing @value{MSGED} on Linux,
FreeBSD or any other Unix-like system.

@menu
* UNIX Installation Procedure::  How to install @value{MSGED}.
* Notes on UNIX terminal I/O::  How @value{MSGED} handles the terminal.
* Notes on UNIX keyboard input::  Escape Meta Alt Control Shift ;-)
* Notes on Big Endian Hardware::  Running @value{MSGED} on RISC processors.
* Colors in the Unix version::  How to enable colors.
@end menu

@node UNIX Installation Procedure, Notes on UNIX terminal I/O, UNIX installation, UNIX installation
@subsection Installation Procedure
If you are using Linux you can get the Linux distribution archive which
contains a pre-compiled binary. If you are running any other Unix (including
FreeBSD, which due to a strange problem in the termios code won't run the
Linux binaries properly) you have to compile the source code on your own
(which usually is not much of a problem).
@xref{Compiling,, Compiling the Soruce Code}, for more information on this.

The following describes the installation of the files from the Linux
distribution archive. If you have compiled @value{MSGED} yourself, you will
find the files that are mentioned below in slightly different locations (much
in the doc/ subdirectory), but they are all present somewhere in the source
code archive as well, after you have done all build actions as described in
the appendix.

@enumerate
@item
Create a temporary working directory and change into it:

@example
~ $ mkdir ~/msged-work
~ $ cd ~/msged-work
@end example

@item
Unzip the Linux distribution archive:

@example
~/msged-work $ unzip ~/msgte5_l.zip
@end example

@item
Fix the file permissions of the executable file:

@example
~/msged-work $ chmod guo+x msged
@end example

@item
The executable can be either installed system-globally in
@file{/usr/local/bin} or some other location, or locally in the @file{~/bin}
subdirectory of your home directory:

@example
~/msged-work $ su root
Password:
/home/someone/msged-work # cp msged /usr/local/bin
/home/someone/msged-work # exit
@end example

@item
At this time, for security reasons, each user that wants to use @value{MSGED}
needs to have his individual configuration files in his home
directory. Copy the file @file{sample.cfg} to @file{~/.msged}:

@example
~/msged-work $ cp sample.cfg ~/.msged
@end example

@item
You have to copy some other files as well:

@example
~/msged-work $ cp msghelp.dat ~/.msged.hlp
~/msged-work $ cp sample.tpl ~/.msged.tpl
~/msged-work $ cp scheme.004 ~/.msged.colors
~/msged-work $ cp readmaps.dat ~/.msged.readmaps
~/msged-work $ cp writmaps.dat ~/.msged.writmaps
@end example

Note that if you have the source code distribution, you must take
@file{readmaps.dat} and @file{writmaps.dat} from the @file{bin/latin}
subdirectory (assuming that your Unix machine uses the ISO 8859-1 character
set).

@item
Modify the configuration file @file{~/.msged} with your favourite text editor
according to your needs. @xref{Configuration Reference} for detailed
descriptions of each keyword that can be used in this file.

@item
You should now refer to the Unix specific release notes found below
before trying to start @value{MSGED}. They can save you from a lot
of headaches ;-).

@item
Also, if you plan to share a message base between Non-Unix and Unix systems,
you absolutely must read the chapter devoted to problems with shared message
bases in heterogenous networks (@pxref{Network Notes,,Using Fidonet software
in network environments}).
@end enumerate

@node Notes on UNIX terminal I/O, Notes on UNIX keyboard input, UNIX Installation Procedure, UNIX installation
@subsection How Terminal I/O is handled on Unix
@cindex TERM variable
@cindex repainting the screen (UNIX only)
@value{MSGED} does neither use the curses library for most of its tasks, nor
does it make use of termcap or terminfo data bases. The way that
@value{MSGED} uses to create its full screen interface is to emit ANSI x3.64
character control sequences. This is a common subset of control sequences
that is recognised, among others, by VT52, VT100, VT200 and higher VTxxx
terminals, by xterm, by the FreeBSD and the Linux console, by the OS/2 telnet
program, and others.  In order to enable special features like color support
based on the @code{TERM} variable, you can use @code{IF} constructs in the
configuration file, as shown in the sample configuration file.

I have tested this on several Unix boxes and it worked remarkably well. For
optimum results, you should use the @file{scheme.004} color scheme file found
in the @file{doc/} resp. @file{samples/} subdirectory. If you have problems
seeing the cursor in an xterm, you should start the xterm with the option
@samp{-cr white}.

If the display is corruped by system log daemon messages or similar, you can
at any time during program execution press @key{Ctrl}-@key{L} to redraw the
screen.

@node Notes on UNIX keyboard input, Notes on Big Endian Hardware, Notes on UNIX terminal I/O, UNIX installation
@subsection Special Notes on Keyboard Input
Due to the history of @value{MSGED}, it heavily depends on typical PC
keyboard combinations like @key{Alt}-keys, combinations of @key{Ctrl} with
cursor keys, and so on. Not all of them are easy to reflect on a Unix console
or in an xterm.

As for the @key{Alt} keys (@key{Alt}-@key{X} and so on): @value{MSGED} tries
to recognize all sorts of ways in which clients reflect @key{Alt} or
@key{Meta} key combinations. If that still does not work on your console,
besides contacting me so that I can fix it, you can emulate an @key{Alt} key 
with the @key{Esc} key: If you press and release the @key{Esc} key and then
press a letter, @value{MSGED} will treat this as if you pressed @key{Alt} and
that letter. However, you have to do this fast, because if no key is pressed
after the @key{Esc} for more than 0.2 seconds, @value{MSGED} will assume that
you really meant to press a single @key{Esc} key, which is also frequently
used in @value{MSGED}.

Some other key combinations, like @key{Ctrl}-@key{Left} and so on, are not
reproducable in an xterm or on a Unix console at all. Therefore, the sample
configuration file @file{sample.cfg} contains a bunch of settings that bind
those functions that are by default bound to key combinations that cannot be
keyed on Unix to other key combinations.

A nasty little problem might occur with the backspace key. If, on your
system, the backspace key deletes the character @emph{under} the cursor
rather than the character on the left hand side of the cursor, you might have
to turn the @code{BS127} switch on by adding @code{Switch BS127 On} to your
configuration file. The sample configuration file already contains correct
settings of the @code{BS127} switch for some widespread Unix consoles.

Entering national special characters like the German a dieresis, or the
french accented characters, is always a problem on Unix. If you want to do
that with @value{MSGED}, refer to the sample configuration file and the
documentation on the @code{EnableSC} keyword (@pxref{EnableSC,,The
@code{EnableSC} keyword}).

If all this sounds very clumsy to you, perhaps you might volunteer to create
a more Unix-friendly keyboard layout for @value{MSGED}. @value{MSGED} allows
to freely redefine the keyboard layout. @xref{Redefining the
Keyboard,,Redifining the Keyboard Bindings}, for more information on
this. The first person that provides me with a really Unix-friendly set of
@samp{ReadKey} and @samp{EditKey} configuration statements will receive
special honour in this manual @dots{}

@node Notes on Big Endian Hardware, Colors in the Unix version, Notes on UNIX keyboard input, UNIX installation
@subsection Notes on Big Endian Hardware
A large part of @value{MSGED} and the underlying message API has been made
independent of little/big endian or structure packing issues. This means that
in principle you can compile @value{MSGED} on Alpha, PowerPC, Sparc, or
whatever exotic hardware and it will read and write exactly the same binary
format files like the Intel versions do. You do not even have to specify any
special compile-time switch for compiling on big endian hardware.

However, some things do not yet work on big on non-Intel machines. This
includes:

@itemize @bullet
@item
the QuickBBS / Hudson Message Base routines

@item
the Fido *.MSG routines

@item
the routines for reading a @file{fastecho.cfg} configuration file.
@end itemize

This means that you presently must restrict yourself to a Squish message base
and a @file{squish.cfg} configuration file if you want to run @value{MSGED}
on big endian hardware. This will be definietly fixed in a future release.

@node Colors in the Unix version,  , Notes on Big Endian Hardware, UNIX installation
@subsection Colors in the Unix version

The UNIX verison of @value{MSGED}, by default, presents itself in spartanic
black and white, because this is most compatible with any existing terminal
type. Even if you use the @code{Color} configuration keyword to define custom
colors, @value{MSGED} still will transform all your color definitions into a
black and white equivalent.

If you want to see @value{MSGED} displayed in nice colors, you need to enable
extended ANSI color codes:

@example
Switch Colors On         # enable ANSI color codes
Include ~/.msged.colors  # include the color configuration
@end example

Of course you need a terminal that supports ANSI color codes. Among others,
these are the Linux console (but not the Linux xterm!), the FreeBSD console,
the "color-xterm" or "xterm-color" or "nxterm" terminal emulators, and the
FreeBSD xterm. You can use Conditionals to switch the @code{Colors} switch
either on or off depending on the @code{TERM}
variable. @xref{Conditionals,,Conditional Statements in the Configuration
File}, for more information.

The sample color scheme file @file{color.004}, that you copied to
@file{~/.msged.colors} during the installation process, contains color
settings with sensible values. If, after adding the two lines from the
example above to your configuration file, parts of the screen or message text
are invisible, your terminal probably does not correctly support ANSI color
codes.


@node Network Notes, Known Bugs, UNIX installation, Installation
@section Using @value{MSGED} and other Fido software in networked environments
@cindex samba
@cindex peer network
@cindex NFS
@cindex lan manager
@cindex access synchronization
@cindex synchronizing message base access
@cindex record locks
@cindex locks, on the message base
@cindex voluntary locks
Sysops that have more than one computer often use network filesystems like
SMB (also known as Lan Manager, OS/2 peer services, the Windows Network, et
cetera), Novell or NFS to share their message base among multiple computers.
Depending on your environment, there are some problems buried into this
approach that might cause hidden data loss and might be unaware to you. These
problems are not specific to @value{MSGED}, but pertain to @emph{any} Fidonet
software that uses the Squish, JAM or Hudson message base format. I feel
enforced to devote a section of this documentation to these problems to save
you from encoutering severe unexpected problems in your installation,
especially as with the addition of Linux or Unix to such a network, the
problems tend to increase dramatically.

@menu
* Access Synchronisation::      Description of the general problem.
* Samba::                       Access Sync. with Lan Manager / Samba
* NFS::                         Access Synchronisation with NFS
* Novell::                      Access Synchronisation with Novell
* Network Essence::             Conclusions to draw from this chapter
@end menu

@node Access Synchronisation, Samba, Network Notes, Network Notes
@subsection Description of the Problem: Why we need access synchronisation.
The issue that we are talking about is access synchronisation.  In a
multi-tasking or networked environment, it happens that two or more programs
simultaneously access the message base. Therefore, the Squish Message API
(this is the piece of software that all Fidonet programs internally use to
access the message base files) needs a way to ensure that no other Fidonet
program can gain access to the message base file while itself is doing vital
modifications on it. Otherwise, data could be screwed up or even lost if two
programs would modify the same file simultaneously.

As long as your message base resides on a single computer, you do not have a
big problem with access synchronisation. On OS/2, Windows NT and DOS, access
synchronisation is done via so called @dfn{record locks}, which works
reliably. On Linux and other Unix system, access control is performed using
so called @dfn{voluntary locks} by all programs that use the @file{SMAPI}
edition of the Squish Message API. This is not as safe as the "record locks"
feature. Voluntary locks can only synchronize programs that use them,
i.E. programs that use the @file{SMAPI}, like @value{MSGED} or hpt. If you
wish to use other Fidonet programs on Unix, you should ask the author if he
employs voluntary locks for access synchronisation. If he doesn't, do not use
his software.

Things get more complicated in a networked environment, because there, not
only different applications have to synchronize among themselves, but
different computers also have to be synchronized. Or in other words, the
network file system that you use must correctly propagate record and/or
voluntary locks that have been set on one computer to all other computers.

@node Samba, NFS, Access Synchronisation, Network Notes
@subsection Access synchronisation on a Lan Manager (SMB) network.
The SMB network protocol (also known as Lan Manager protocol, or OS/2 Peer
Network, or Windows network), in principle, has support for propagating
record locks over the net. Tests proved that it works quite well in all
systems except Linux (Unix). This means that as long as your network only has
OS/2, Windows 3.11/95/NT and DOS (with @file{SHARE.EXE} loaded) systems, you
do not have to worry about access synchronization.

If you add a Linux box to a SMB network, things get more complicated. For
adding Linux to a SMB network, the Samba program is used. The Samba server
(as of version 1.9.18.p8, which has been used for all tests described below)
has some support for record locks, but it has restrictions. The Samba server
will not grant a program running on computer A access to a message base file
while a program running on computer B has placed a record lock on this
file. However, it will frankly grant a second program running on computer B
access to this file even while the first program running on computer B still
has a lock on this file. This is a bug in the Samba server. It hope
it will get fixed in further releases. - A further shortcoming of the samba
server is that it does not convert voluntary locks placed on the Unix side
into record locks visible on the OS2/DOS/Windows side. This means that any
OS/2 program, for example, can always access the message base file even if a
Linux program holds a lock on the file.

Also, neither of the available samba clients (smbfs, rumba) have support for
propagating voluntary locks as record locks.

The essence of this is: @emph{You cannot savely share a message base between
Linux/Unix and Non-Unix systems using Samba}. All you can do is place the
message base on a Samba server @emph{if} you assure that no other Linux
program accesses the message base, and that only OS/2, DOS and Windows
clients connect to the Samba server, and further more that on those clients,
only one program at a time tries to access the message base (that is: a
client with a multitasking OS that runs the tosser must not have any editor
installed, and you should never start up two editors simultaneously on any
client).

This is harsh, but true. Write mails to the programmers of Samba
and beg them to fix the problem with multiple programs on one clients, and to
implement the feature to convert voluntary locks on Unix side into record
locks on Non-Unix side. Perhaps the situation will then change in the future.

@node NFS, Novell, Samba, Network Notes
@subsection Access synchronisation on NFS
As for NFS, NFS itself does not support any kind of access synchronization at
all (!). Access synchronization on NFS is performed using an additional daemon
software called @file{rpc.lockd}. So if you have a NFS server that has a
functional @file{rpc.lockd} daemon @emph{and} all NFS clients support the
rpc.lockd protocol, then you can use NFS to share a message base between
multiple computers. The bad news is that I have not seen a working
@file{rpc.lockd} on either FreeBSD or Linux, and at least the NFS client for
OS/2 (as probably all other Non-Unix NFS clients) does not support the
rpc.lockd protocol. If you want rpc.lockd to work, you currently must use AIX
or Digital Unix or maybe also some other commercial Unix. Not an option for the
home user, I fear.

The essence is: @emph{You cannot use NFS to share a message base between
multiple computers}.

@node Novell, Network Essence, NFS, Network Notes
@subsection Access synchronization on Novell networks
Finally for Novell: I do not have any information on Novell networks. I
suppose that they natively do support record locking, but I do not know if or
how the existing Novell clients for Linux/Unix do support it.

@node Network Essence,  , Novell, Network Notes
@subsection The essence of this section about network usage is:
@enumerate
@item
You can savely share a message base among multiple computers in a Lan Manager
(OS/2 Peer, Windows Network, SMB Network, ...) network as long as no Linux
or Unix computer is involved.

@item
You can place the message base on a Linux/Unix fileserver running samba only
as long as no fidonet software is running on the file server, no Linux or
Unix client is involved, and all other clients take care that only one
Fidonet program at a time is being run. (This includes not only the tosser
and maintenance programs, but also the mail editor itself).

@item
There currently is not any way to savely share a Squish, JAM or Hudson
message base between computers if any of the computers is a Linux or Unix
machine. If you want to run Fido on the Linux box, the Linux box has to have
its own messagebase (usually meaning that you must install it as sysop point
or similar). 
@end enumerate

If you do not obey to these three rules, you sooner or later will experiences
loss or corruption of mails and mail areas. Sorry to say so.

But what if you absolutely have to share a message base between multiple
Linux/Unix or Linux/Unix and Non-Unix computers? There is only one solution
to this problem: Use a message base format that does not require access
synchronisation. While the Squish, JAM and Hudson message base formats to
require access synchronisation because they store multiple mails in a single
file, the Fido *.MSG (also known as Opus) message base format does not have
this restriction because each mail is stored in a separate file. So Fido
*.MSG presently is the only way to go if you want to share your message base
between Linux/Unix and Non-Unix or other Unix computers.


@node Known Bugs, Contact, Network Notes, Installation
@section Known Bugs and Non-Features
This sections lists some shortcomings of the current release
@value{MSGED} @value{VERSION}. Please do not complain to me about these
problems, I am well aware of the problems and will try to solve them in the
future to the best of my possibility. (If, on the other hand, you want to fix
these problems on your own, go ahead and send me the changes you made. They
will be greatly appreciated.).

@itemize @bullet
@item
The documentation is lacking a chapter that provides the beginner with a
quick overview on how to use @value{MSGED}

@item
Version 7 nodelist lookup is not always working correctly (if two sysops
accidentally have the same name, it simply yields by random the nodenumber of
the one or the other, but does not let you select between the two of them)
and is lacking a lot of features. It is suggested that as long as things are
like that, you instruct your nodelist compiler to generate a
@file{FIDOUSER.LST} listing file. @xref{UserList,,The @code{UserList}
Keyword}, for more information.

@item
The Windows NT version does not allow entry of special characters by ASCII
code using the @key{Alt}-@var{numeric keypad} - Method. Also, under Windows
95, you must use @key{AltGr} to create special characters. 
@key{Ctrl}+@key{Alt} will not work.

@item
On non Intel hardware, the routines for Fido and Hudson message bases as well
as the routines for importing @file{fastecho.cfg} will not work properly.

@end itemize

@node Contact,  , Known Bugs, Installation
@section Support, Contacting the Author, Reporting Bugs, Contributing Code
There are numerous reasons why you might wish to establish contact with me,
the author of @value{MSGED}.

@enumerate
@item
You have decided to use @value{MSGED} on a regular basis. In this case,
please do send me an e-mail at the address listed below. How much time I will
spend on developing @value{MSGED} in the future will heavily depend on the
number of mails I receive from users that tell me that they do use
@value{MSGED}.

@item
You have a general questions on how to configure or on how to use a certain
feature of @value{MSGED}. In other words, you need support. In this case,
you'd best post your question to one of the following echos:

@table @code
@item MSGED_ECHO
The international MsgEd conference. English is the preferred language here.
@item OS2BBS.GER
This German echo covers OS/2 Fidonet software. I monitor it regularly.
@item OS2NET.BBS.GER
The equivalent of OS2.BBS.GER in the German OS/2 net. I monitor it regularly.
@end table

If you do not have access to any of these echos, you may of course also
contact me via netmail or e-mail at the addresses listed below.

@item
You want to report a bug. There are two sorts of bugs:

@enumerate a
@item Normal bugs.
You think that a certain function of @value{MSGED} does not work as expected,
e.g. it is producing garbage, or doing strange things, or similar. In this
case, either post to the echos listed above, or contact me via
netmail. Please do supply all information that is necessary to understand
your problem.

@item Fatal bugs.
A fatal bug occurs if @value{MSGED} crashes. Depending on your operating
system, the symptom might be a core dump, or a SYS 3175, or a general
protection fault, or a system lockup, or a spontaneous reboot. I do consider
a crash untolerable. No matter how stupid things you do, you should not be
able to crash @value{MSGED}.

If you are running the precompiled Linux binary, reporting a fatal bug is
exceptionally easy. If you experience a crash, simply send me the @file{core}
file that has been generated. You do not need to try to reproduce it or write
extensive descriptions. Simply send the @file{core} file, and in most
circumstances I will be able to fix the problem.

If you are running any other binary version (like OS/2, DOS, Windows), you
will not get a core file on a crash. (On OS/2, you can write me a mail and
ask me for sending you a debugging executable. This will require the EMX
runtime, but generate @file{core} files just like the Unix version
does. On DOS and windows, you do not have this option). Write down as much
information as you can, try to find a way to reproduce the crash and contact
me at the addresses below.
@end enumerate

@item You want to contribute to @value{MSGED}.
If you are a programmer and have fixed a problem in @value{MSGED} on your
own, please submit your changes to me. The preferred way for doing so is to
send me a difference file in GNU diff format. Your work will be highly
appreceated and honored in an appropriate place. If you want to regularly
work on @value{MSGED}, we also have a CVS server online that you can have
access to if you like.

If you want to write a new feature for @value{MSGED}, please contact me
beforehand to avoid that we do duplicate work. Again, I will appreciate and
honor eny efforts done by you. Please note that for writing a @value{MSGED}
enhancement, you should be familiar with C. Also, @value{MSGED} uses a
special indentaion style throughout the source code, that I would like you to
adhere to.
@end enumerate

So here are my addresses if you want to get in contact with me:

@itemize @bullet
@item Fidonet:
Tobias Ernst @ 2:2476/418

@item e-mail:
tobi@@bland.fido.de

@item Telefax:
+49 711 5000184

@end itemize






@node Introduction, Advanced Concepts, Installation, Top
@chapter A quick tour through @value{MSGED}
This chapter will be supplied in a future revision of this
document. It will provide an introduction for beginners on using
@value{MSGED}.

As long as this chapter is not provided, you must help yourself using the
online help. Nearly everywhere in @value{MSGED}, you can press
@kbd{Alt}-@kbd{H} to get a somewhat context sensitive help screen.

@node Advanced Concepts, Keyboard Reference, Introduction, Top
@chapter Advanced Concepts in @value{MSGED}
After you have managed to perform basic functions with @value{MSGED}, like
reading messages, entering new messages, and replying to messages, this
chapter will introduce you into some advanced concepts in
@value{MSGED} that deserve special attention, like how to use a
Fidonet-Internet gateway, how to use eight bit character sets, and similar.

@menu
* Exporting and Printing::      Exporting mails to text files or printers.
* Special Characters::          Special Characters and FSC 0054 Charset Kludges
* Internet Gateways::           Using @value{MSGED} for e-mail correspondance.
@end menu

@node Exporting and Printing, Special Characters, Advanced Concepts, Advanced Concepts
@section Exporting Mails to Text Files or to the Printer
@cindex exporting a mail
This section tells you how to export mails to text files that you can than
use for various purposes like importing into a text processor, as well as how
to print mails. While this as it self is not a very advanced feature, the
file export menu in @value{MSGED} has some hidden features to control the
format of the exported mail that might not be aware to you. Also, some users
might not know that they can use the file export menu to print mails.

@menu
* Exporting Basics::            How to export a mail to a text file.
* Export Formats::              How to control the format of the text file.
* Printing::                    How to print a mail to a line printer.
@end menu

@node Exporting Basics, Export Formats, Exporting and Printing, Exporting and Printing
@subsection How to use the Mail Export Feature
When you are in message reading mode, you can press @key{Alt}-@key{W} in
order to invoke the mail export dialog. This dialog looks like this:

@example
*---------------------- Export File ----------------------*
| Name of file to export?                                 |
| mail.txt                                                |
|                      Ok    !   Cancel  !                |
|                   **********  **********                |
*---------------------------------------------------------*
@end example

It seems very simple to use at first glance. Simply write a name of a file to
export the mail to into the dialog field and then press @key{Enter} to start
the action. 

And indeed you can export mails in this way. Mails that have been exported in
this way are suitable to be re-imported into @value{MSGED} by pressing
@key{Alt}-@key{R} when you are in the internal message editor. This is often
useful when you want to copy a part of a mail and insert it into a new
message you are composing.

However, if you look at the file that has been generated with a text editor,
the result will be dissatisfying. Read on below to find out why.

@node Export Formats, Printing, Exporting Basics, Exporting and Printing
@cindex format, of exported mail
@subsection Controlling the Format of the Exported Message
By default, @value{MSGED} exports a message in @dfn{raw message format}, also
called @dfn{MsgEd format}. This format saves the mail raw as it is stored in
the message base, which means that line feeds will only be placed after each
@emph{paragraph}. This format is well suited if you later want to import the
mail into the internal message editor, because it will exactly keep the
paragraph format of the message. However, it is not suitable for printing or
editing the file with a normal text editor, because there, you will only see
one very long line per paragraph, which is mostly not what you wanted to
have.

If you want to print the file with the exported message or to view it with a
normal text editor, you must instruct @value{MSGED} to export the file in the
@dfn{text format}. In text format, the message will be saved in a
line-wrapped form, that is, the file will look just like the mail that you
see on screen in message reading mode, with a linefeed placed after each
line. You instruct @value{MSGED} to export a mail in text format by appending
@samp{,t} to the file name like in this example:

@example
*---------------------- Export File ----------------------*
| Name of file to export?                                 |
| mail.txt,t                                              |
|                      Ok    !   Cancel  !                |
|                   **********  **********                |
*---------------------------------------------------------*
@end example

This format is well suited for printing and editing.

@value{MSGED} also has some other formats for exporting mails. All of them
are invoked by placing a comma and the corresponding letter after the file
name. Here is a complete list:

@table @samp
@item ,t
Text mode. Place a line feed after each line. Well suited for printing or
editing with a standard text editor.
@item ,m
Raw message mode. This is your choice if you later wish to re-import the
message into the internal message editor.
@item ,q
Quoted mode. This is like text mode, but each line will be prefixed with the
quote string.
@end table

If you cannot remember these format characters, you can also ask @value{MSGED}
to present you a menu with all possible export formats by putting a
questionmark @emph{in front of} the file name like in this example:

@example
*---------------------- Export File ----------------------*
| Name of file to export?                                 |
| ?mail.txt                                               |
|                      Ok    !   Cancel  !                |
|                   **********  **********                |
*---------------------------------------------------------*
@end example

@node Printing,  , Export Formats, Exporting and Printing
@subsection Printing Mails
@cindex printing
@cindex piping

The message export facility can also be used to print a message. On all
systems except Unix, this is done by printing to the special printer device
called @file{PRN}. That is, in order to print a mail, press @key{Alt}-@key{W}
and enter @file{PRN} as name of the file to export the message to. Do not
forget to enter @samp{,t} after the file name in order to switch to text mode
(only text mode will yield good results for printing a mail):

@example
@r{Example for printing on OS/2, DOS or Windows:}
*---------------------- Export File ----------------------*
| Name of file to export?                                 |
| PRN,t                                                   |
|                      Ok    !   Cancel  !                |
|                   **********  **********                |
*---------------------------------------------------------*
@end example

On Unix, printing is performed by piping the mail into the lpr
program. Fortunately, @value{MSGED} also supports piping. Simply prefix the
``filename'' with a pipe character (the broken vertical bar), and the rest of
the string (except for the comma and the format character) will be
interpreted as a command to be executed by the shell. Again, do not forget to
switch to text mode by appending @samp{,t} to the command.

@example
@r{Example for printing on Unix:}
*---------------------- Export File ----------------------*
| Name of file to export?                                 |
| |lpr - ,t                                               |
|                      Ok    !   Cancel  !                |
|                   **********  **********                |
*---------------------------------------------------------*
@end example

You can of course also use the pipe character for piping mails through other
programs than lpr. For example, you could pipe cooking recipes from an
echomail area devoted to cooking through a perl or rexx script that archives
them in a database.

As a side note, piping does also work in the OS/2 and Windows versions of
@value{MSGED} if they have been compiled with a GNU compiler supporting the
@code{popen} command. (The binary versions that I have released are).


@node Special Characters, Internet Gateways, Exporting and Printing, Advanced Concepts
@section Using Special Characters - The FSC 0054 Charset Kludge
@cindex FSC 0054
@cindex special characters
@cindex charset kludge
@cindex character set conversion

Languages other than English often use special characters besides the normal
alphabet. Examples are the accented letters in French or the umlauts in
German. IBM block graphics are also called special characters. This section
will describe what measures have to be taken in order to be able to transmit
special characters via Fidonet.

@menu
* Problems with Special Characters::  Description of the general problem.
* Special Characters in Fidonet::  FSC/FTS proposal to solve the problem.
* MsgEd TE and Special Characters::  How @value{MSGED} implements FSC 0054.
@end menu

@node Problems with Special Characters, Special Characters in Fidonet, Special Characters, Special Characters
@subsection What is so special about special characters?

In order to be able to exchange text between computers, it was necessary to
agree on a scheme on how to encode letters into numbers, the so called
@dfn{character set}. The standard character set for transferring text between
a huge variety of computer systems is the ASCII character set. Unfortunately,
the ASCII character set is only 7 bit wide and does not leave room for
national special characters. 

In order to be able to transfer special characters like accents and umlauts,
it was therefore necessary to use eight bit wide extended character sets
that defines how special characters are encoded.

In contrast to the standard 7 bit ASCII character set, which is a single
character set used by nearly all computer systems, there exist several
pseudo-standard character sets that are 8 bits wide. All of them contain
ASCII as an subset, but they all differ in how they encode special
characters. DOS and OS/2 computers typically use the IBM PC character set,
but even there, dependent on what country you live in, there are several
different code pages of the IBM PC character set. Unix computers and the
Amiga typically use the ISO8859 character set, also known as Latin-1. Windows
uses IBM PC for console applications, but ISO8859 for graphical
applications. The Macintosh uses the Macintosh character set. The consequence
of this is clear: If you write a text on a Unix or Windows computer using
special characters like accented letters or umlauts, you cannot expect it to
be properly displayed on a DOS or OS/2 computer, and vice versa, unless
special measures are taken.

@node Special Characters in Fidonet, MsgEd TE and Special Characters, Problems with Special Characters, Special Characters
@subsection How has this problem been solved in Fidonet?
This issue of special characters has been a problem for Fidonet in the past,
but it has been solved by the Fidonet standard FSC 0054, so that you can now
safely use special characters in Fidonet mail @emph{if} your message editor
supports FSC 0054. FSC 0054 basically works like this:

Every Fidonet editor that wants to be compatible with FSC 0054 must be
delivered along with built-in or external character translation tables that
tell the editor how it can convert text that contains special characters from
one character set to another.

When composing a message using a FSC 0054 compliant editor, you have two
choices: By default, the editor allows you to enter the full range of special
characters that your computer supports, but when saving the message, the
editor will use its character translation tables and convert your text into a
7 bit clean representation that can be displayed on @emph{all} computers even
if they don't support FSC 0054. For example, a German sharp s would be
converted into double s, an e with accent would be converted into an e
without accent, and so on. This is the maximum compatibility mode: It offers
you the comfort of being able to write text just as you would in a letter,
using all special characters that your language requries, but your mails
will still be properly displayed on all computers.

The other (better) possibility is that your editor leaves the special
characters that you typed in as is, but inserts a hidden kludge line, from
here on referred to as the @dfn{charset kludge}, into the message, that
designates which character set you have used for composing the message. When
your message is read on another computer by a Fidonet message reader that
also supports FSC 0054, the message reader will see the charset kludge in
your mail and then use its charset translation tables to convert your
message into the character set that this computer uses. The consequence is
that even if your computer and the computer of the receiver use different
character sets, everything that you typed in will look just the same on the
receiver's screen than on yours, including all special characters that have
been typed.

@node MsgEd TE and Special Characters,  , Special Characters in Fidonet, Special Characters
@subsection How do I configure @value{MSGED} to support FSC 0054?
@value{MSGED} fully supports FSC 0054. The character set translation files
are named @file{READMAPS.DAT} and @file{WRITMAPS.DAT}. You can enable
character set translation support in @value{MSGED} by simply copying these
files into the directory from which @value{MSGED} is started. (On Unix, you
have to move and rename them to @file{~/.msged.readmaps} and
@file{~/msged.writmaps} instead. If the files can be found and are valid, you
will be notified that the FSC 0054 character set translation engine has been
activated when @value{MSGED} starts.

It is important that you use the correct @file{READMAPS.DAT} and
@file{WRITMAPS.DAT} files, because these files are tailored to the charcter
set that you are using locally: The OS/2, DOS and Windows versions of
@value{MSGED} ship with a pair of @file{READMAPS.DAT} and @file{WRITMAPS.DAT}
that are tailored for the IBMPC codepage 437 (international). In order to
find out if you are using codepage 437, you can use the @file{CHCP} command
with no arguments. If you are not using codepage 437, you should write a
batch file that first calls @file{CHCP 437} before calling @value{MSGED}. If
you are using codepage 850, you might alternatively also delete
@file{READMAPS.DAT} and @file{WRITMAPS.DAT} and then rename the files
@file{READMAPS.850} and @file{WRITMAPS.850} to @file{READMAPS.DAT} and
@file{WRITMAPS.DAT}. These files are tailored for codepage 850.

The Linux version ships with a pair of @file{READMAPS.DAT} and
@file{WRITMAPS.DAT} that are tailored to computers that use the ISO 8859
character set (Latin-1). (Some Linux boxes use IBMPC, codepage 437, or even
850, instead, but I strongly suggest that you change your system
configuration to use ISO 8859 in that case!).

If you have the source code distribution of @value{MSGED}, the @file{bin}
subdiretory contains @file{readmaps.dat} and @file{writmaps.dat} files for
all supported code pages.

The following table lists all level 2 character sets that @value{MSGED}
understands (meaning all character sets that are defined in the
@file{READMAPS.DAT} and @file{WRITMAPS.DAT} files):

@example
@@CHRS-Kludge: | Conventional Name:   | Used by these computers:
--------------+----------------------+---------------------------
LATIN-1       | ISO 8859-1           | Unix, Amiga, Windows GUI
MAC           | MAC                  | Macintosh computers
IBMPC         | IBM PC, Codepage 437 | DOS, OS/2, Windows console
CP850         | IBM PC, Codepage 850 | National German editions of
              |                      |   DOS, OS/2 and Windows.
@end example

These are the character sets that are used in the Western World. I would like
to also support the different Kyrillic and Slavic character sets, but do not
have any information on those. If you can supply me with more information,
please contact me!

Once FSC 0054 is activated, @value{MSGED} will be able to correctly display
all mails that have been created with one of the characters sets listed
above, as long as they contain the proper charset kludge
line. (Unfortunately, quite some still don't - do tell their authors to
correct their setup!). Mails that you write yourself may contain any
special characters, but @value{MSGED} will convert them into a 7 bit ASCII
character set when you save them.

If you want to retain special characters in your mail by adding a charset
kludge, you have to do two things. First, you have to define which character
set to use for saving your mails (it must not necessarily be the character
set that you are using locally, but you should not use
@code{CP850}). @xref{OutputCharset,,The @code{OutputCharset} Keyword}, for
information on how to do this. In most cases, you will simply want to add the
following line to your configuration file:

@example
OutputCharset IBMPC
@end example

This will even work if you have a Linux box. Then, you have to tell
@value{MSGED} in which areas it is allowable to send mails with special
characters and charset kludges. @value{MSGED} will only write special
characters into areas that have the @samp{8} flag set. If you are importing
your message area configuration from a tosser configuration file, you can
simply put the following line to the beginning of your configuration file:

@example
AreaFileFlags 8
@end example

(If you already have an @code{AreaFileFlags} statement, just add the @samp{8}
character to its parameters). @xref{Areafile and AreaFileFlags, The @code{AreaFileFlags}
Keyword}, for more information.

This will allow @value{MSGED} to use special characters in conjunction with a
charset kludge in all message areas imported from a tosser configuration
file.

If you only want to enable special characters for a few areas, you have to
define these areas manually, giving each of them the @samp{8} flag
individually. The same applies if you have to define your areas manually for
other reaseons. @xref{Manual Area Definition,,Manual Area Definition}, for
more information on this.

@node Internet Gateways,  , Special Characters, Advanced Concepts
@section Internet Gateways - Using @value{MSGED} for e-mail and newsgroups

@value{MSGED} has built-in support for Fidonet to Internet Gateways, allowing
for seemless coexistence of Fidonet mail and Internet mail. When you use
@value{MSGED} to talk to your Internet gateway, you do not even have to know
about all the nasty details of gateway addressing - @value{MSGED} does the
job for you. This makes @value{MSGED} the ideal choice as an editor to give
to new users that want instant e-mail access without having to care for
klumsy gateway addressing rules.

@menu
* Gateway Principles::          How does a UUCP gateway work?
* Gateway Configuration::       How to configure @value{MSGED} for e-mail.
* Gateway Usage::               How to use @value{MSGED} to write e-mail.
@end menu

@node Gateway Principles, Gateway Configuration, Internet Gateways, Internet Gateways
@subsection How to properly address an Internet Gateway
There are various ways of designing Fidonet to Internet gateways. The most
common is the @dfn{Gatebau} standard, which among others is
implemented in the excellent gateway software Fidogate by Martin Junius. You
can find more information about Fidogate at @url{http://www.fido.de}. Various
other gateway programs more or less conform to this standard as well.

Addressing a Gatebau compatible gateway works like this: The gateway has its
own node- or point number. When you wish to write an e-mail using a standard
Fidonet editor, you have to address your netmail to this gateway node
number. As receiver's name, you can use the real name of the receiver, or you
can use @samp{UUCP}, if the real name of the receiver is unknown. Some
not-so-smart gateway software requires that you always use @samp{UUCP} as
receiver's name. - In order to tell the gateway the e-mail address that the
mail should be delivered to, the very first line of your message must contain
the e-mail address of the receiver, preceded by @samp{To:}. The e-mail
address can be specified in three different forms. Here are three possible
first lines of gateway-addressed netmails:

@example
To: juser@@somedomain.com
To: juser@@somedomain.com (Joe User)
To: Joe User <juser@@somedomain.com>
@end example

The last of these forms is not supported by some older gateway
software. - The @samp{To:}-line must be followed by an empty line, and then you
can begin with your message text. A complete e-mail addressed to an internet
gateway at @samp{2:99/999.0} could look this:

@example
==========Message Header==================
From:    Bill Sysop, 2:99/123.0
To:      UUCP, 2:99/999.0
Subject: This is a test e-mail
==========Message Body====================
To: juser@@somedomain.com (Joe User)

Hello Joe!

This is a test.

Regards, 
Bill.
@end example

Receiving e-mail from the gateway is similar: You receive an e-mail from the
gateway node or point, and in the mail boday, the first line will contain a
@samp{From:}-line which designates the e-mail address the mail was
from. Sometins, the @samp{From:}-line is followed by a @samp{Reply-to:} line,
which indicates that the sender wishes to receive any answers at the e-mail
address shown in the @samp{Reply-to:}-line rather than at the e-mail address
shown in the @samp{From:}-line. Here is an example:

@example
==========Message Header========================
From:    Joe User, 2:99/999.0
To:      Bill Sysop, 2:99/123.0
Subject: Re: This is a test e-mail
==========Message Body==========================
From: Joe User <joe@@some-machine.somedomain.com>
Reply-To: Joe User <juser@@somedomain.com>

Hello Bill!

I received your test e-mail without problems.

Regards, 
Joe.
@end example

This interface works with every stone-age Fidonet editor, but it is
clumsy. When replying to an e-mail that came through a gateway, for example,
you would have to remember the sender's e-mail address, and when writing the
reply, you would have to manually insert a correct @samp{To:}-line, just to
name one problem.

Therefore, @value{MSGED} can do the work for you. If properly configured,
@value{MSGED} will to the job of interpreting and inserting @samp{From:},
@samp{Reply-To:} and @samp{To:} lines. With gateway support turned on,
writing an e-mail with @value{MSGED} is just as easy as writing a fidonet
netmail. In the following, we will see how to configure @value{MSGED} for
gateway support and how to use these features.

@node Gateway Configuration, Gateway Usage, Gateway Principles, Internet Gateways
@subsection How to configure @value{MSGED} to use an Internet Gateway
In order to do the gateway addressing stuff for you, @value{MSGED} needs to
know which gateway you wish to use for sending e-mail. @value{MSGED} will
recognise gated e-mail no matter which gate it comes from, but it must be
told which gateway can be used to send replies and new e-mail, because most
gateways require that you pay some sort of registration fee before you can
use them for sending mail.

The @code{UUCP} keyword is used to tell @value{MSGED} the node number of your
internet gateway (@pxref{UUCP,,The @code{UUCP} Keyword}). It simply takes
this node numer as argument. Example:

@example
UUCP 242:4900/99.0
@end example

The @code{UucpName} keyword is used to tell @value{MSGED} the name that must
be in the receiver's name field in a netmail sent to the gateway. For older
gateways, you should use

@example
UucpName UUCP
@end example

If your gateway is running Fidogate or another more advanced gateway program,
you should use

@example
UucpName *
@end example

This enables real name mode, i.E., mail addressed to the gateway will have
the real name of the receiver in the receiver's name field instead of the
pseudo name @samp{UUCP}. The advantage of this is that your message templates
will generate strings like @samp{Hello Joe!} instead of @samp{Hello UUCP!}
@dots{}

There is yet another task to be done before you can use the gateway
addressing features of @value{MSGED}. For historical reasons, the gateway
addressing features are disabled by default, and you have to enable them on a
per-area basis.

Unless you have special needs, it is best to enable the gateway addressing
features for @emph{all} areas, because a lot of fidonet areas are gated to
internet somewhere. You do this by adding the @samp{u} flag to every area
that you have manually defined in the @value{MSGED} configuration file, and
by specifying @code{AreaFileFlags u} at the beginning of the configuration
file in order to set the @samp{u} flag for all area definitions that are
imported from your tosser configuration file. @xref{Area
Definitions,,Defining Message Areas}, for more information on message area
flags.

@node Gateway Usage,  , Gateway Configuration, Internet Gateways
@subsection Using Internet Gateays with @value{MSGED}
Once you have configured @value{MSGED} with the data of the gateways that you
wish to use and turned on the @samp{u} flag for all areas, writing e-mail is
very simple. When entereing a message, you just have to enter a valid e-mail
address instead of a user name. If @value{MSGED} recognises a valid e-mail
address, it will not look up this name in the nodelist or prompt you for a
node number, but it will automatically address the mail to the configured
gateway nodenumber and generate the necessary @samp{To:}-line. The
@samp{To:}-line will not even be shown to you, unless you have the
@code{ShowNotes} switch on (@pxref{List of Switches,,List of available
switches}).

Reading e-mail that comes from any internet gateway is equally simple. If the
@samp{u} flag is set for an area, @value{MSGED} will automatically recognise
@code{From:} and @code{Reply-To:} lines and hide them from you. Instead of
displaying the gateway pseudo user name and node numer, it will display 
the e-mail address that the mail is coming from in the message header field.

@value{MSGED} also supports newsgroups, i.E. echomail areas that are being
received from an internet gateway, as long as the @samp{u} flag ist turned on
for these areas.. In newsgroups, @value{MSGED} will handle mails (postings)
just as in netmail areas, i.E. it will display the sender's e-mail address in
the message header. If you do a private reply (i.E. a reply to a netmail area
using @key{Alt}-@key{N}), the e-mail reply will correctly be addressed to
your favorite internet gateway.

@node Keyboard Reference, Configuration Reference, Advanced Concepts, Top
@chapter @value{MSGED} Keyboard Reference
This chapter gives a complete listing of available keystroke combinations in
@value{MSGED}. After that, you will find instructions on how you can redefine
the keyboard to suit your preferences.

Please note: @value{MSGED} traditionally uses a DOS-ish PC keyboard with
@key{Alt} key and function keys. Unix users should refer to the Unix
installation notes before reading this chapter (@pxref{Notes on UNIX keyboard
input}).

@menu
* Arealist Keystrokes::         Keystroke combinations in the Arealist Screen
* Reader Keystrokes::           Keystroke combinations in message reading mode
* Editor Keystrokes::           Keystrokes in the internal message editor
* Redefining the Keyboard::     How to redefine the keyboard layout
@end menu

@node Arealist Keystrokes, Reader Keystrokes, Keyboard Reference, Keyboard Reference
@section Keystroke Combinations in the Arealist Screen

The arealist screen is the screen that normally shows up right after you
start @value{MSGED}. It lists all areas that you have defined in the
configuration file (@pxref{Area Definitions,,Defining Message Areas}).

The arealist screen can be navigated with the cursor keys, or you can also
navigate through the area list by simply typing in the first few letters of
the area name that you are looking for.

In addition, the following commands are available in the arealist screen:

@table @asis
@item @key{Right}
@itemx @key{Enter}
Enter the selected area

@item @key{Alt}-@key{X}
Quit @value{MSGED}

@item @key{*}
@itemx @key{Alt}-@key{T}
Scan all message areas for new messages. Depending on your setup, you will
have to do this on program startup. The scan process can be interrupted by
pressing @key{ESC}.

@item @key{#}
@itemx @key{Alt}-@key{S}
Scan message areas for new messages, but only scan areas that have not been
scanned perviously. Areas that have not yet been scanned for messages are
listed with dashes instead of message numbers in the area list.

@end table

The keyboard setup of the Arealist Screen cannot be modified by the user.


@node Reader Keystrokes, Editor Keystrokes, Arealist Keystrokes, Keyboard Reference
@section Keyboard Commands and Functions in Message Reading mode
When you press @key{Enter} or @key{Right} in the arealist screen, you will
enter message reading mode. In this mode, one message is displayed at a
time. You can scroll through the message, write new messages, jump to other
messages of the same message area, jump to other message areas, and invoke
numerous special functions.

All functions that are accessible from this mode have a unique name. Most
functions are prebound to a reasonable keycode combination, but you can
redefine the keyboard mapping by assigning other keycode combinations to
these function names (@pxref{Redefining the Keyboard,,Redefining the
Keyboard}).

@menu
* Navigation Functions::        Keystrokes for navigating through messages.
* Message Functions::           Keystrokes for entering or changing messages.
* Scanning and Searching::      Keystrokes for scanning or searching mails.
* Options Functions::           Keystrokes for changing program behaviour.
* Misc Reader Functions::       Miscellaneous other functions.
@end menu

@node Navigation Functions, Message Functions, Reader Keystrokes, Reader Keystrokes
@subsection Reader Functions for Navigation

@table @asis
@item Function: @code{down}, bound to: @key{Down}
@krindex down
Scrolls the text of the current message down.

@item Function: @code{up}, bound to: @key{Up}
@krindex up
Scrolls the text of the current message up.

@item Function: @code{help}, bound to: @key{Alt}-@key{H}
@krindex help
Displays online help on available keyboard commands.

@item Function: @code{next}, bound to: @key{Right}
@krindex next
Go to the next message in this area.

@item Function: @code{previous}, bound to: @key{Left}
@krindex previous
Go to the previous message in this area.

@item Function: @code{first}, bound to: @key{Home}
@krindex first
Go to the very first message in this area.

@item Function: @code{slast}, bound to: @key{End}
@krindex slast
Go to the very last message in this area.

@item Function: @code{link_to}, bound to: @key{Ctrl}-@key{Right}
@krindex link_to
Go to the message that is a reply to this message. If there is more than one
reply to this message, you will be presented a select box.

@item Function: @code{u-next}, bound to: @key{Ctrl}-@key{I}
@krindex u-next
Go to the message that is a reply to this message. If there is more than one
reply to this message, this function does not present a select box, but
simply jumps to the first of all replies.

@item Function: @code{link_from}, bound to: @key{Ctrl}-@key{Left}
@krindex link_from
Go to the message that this message is in reply to (if any).

@item Function: @code{next_area}, bound to: @key{+}
@krindex next_area
Go to the next message area.

@item Function: @code{prev_area}, bound to: @key{-}
@krindex prev_area
Go the the previous message area.

@item Function: @code{list}, bound to: @key{Alt}-@key{L}
@krindex list
This will display a list of all messages in this area. You can navigate
through this list with the cursor keys, tag entries by pressing space, and
apply a subset of the functions of the message reading mode (like delete,
move, etc.) to the tagged messages. You can leave the list by pressing either
@key{Enter}, which will position you to the message that was selected
in the list when pressing @key{Enter}, or by pressing @key{Esc},
which will position you to the message that was active before entering the
message list mode.

@item Function: @code{last}, not pre-bound to any key
@krindex last
Go to the last read message in this area (the message right before the first
unread message).

@item Function: @code{astart}, not pre-bound to any key
@krindex astart
Go to the message that was active when you entered this message area.

@item Function: @code{home}, not pre-bound to any key
@krindex home
Go to the first message in the current reply-chain.

@item Function: @code{back}, not pre-bound to any key.
@krindex back
Goes back to where you were in the reply chain before using the
@code{link_to} or @code{link_from} functions. Untested.
@end table



@node Message Functions, Scanning and Searching, Navigation Functions, Reader Keystrokes
@subsection Reader Functions for Entering, Modifying and Deleting Messages

@table @asis
@item Function: @code{newmsg}, bound to: @key{Alt}-@key{E} or @key{Ins}
@krindex newmsg
Enter a new message.

@item Function: @code{reply}, bound to: @key{Alt}-@key{R}
@krindex reply
Reply to the message currently displayed without quoting it.

@item Function: @code{quote}, bound to: @key{Alt}-@key{Q}
@krindex quote
Write a quoted reply to the message currently displayed.

@item Function: @code{repoth}, bound to: @key{Alt}-@key{N}
@krindex repoth
Reply to this message in a different message area. You can use this for
netmail replies as well as for moving a thread from one area to a different
one.

@item Function: @code{followup}, bound to: @key{Alt}-@key{U}
@krindex followup
Reply to this message, but address the reply to the recipient of the message
you are replying to instead of the sender.

@c{FIXME "repext", replyextra},

@item Function: @code{change}, bound to: @key{Alt}-@key{C}
@krindex change
This allows you to edit an existing message.

@item Function: @code{edithdr}, bound to: @key{Ctrl}-@key{H}
@krindex edithdr
Edit the header of the current message (but not the text).

@item Function: @code{move}, bound to: @key{Alt}-@key{M}
@krindex move
Move the message currently displayed to another area.

@item Function: @code{delete}, bound to: @key{Alt}-@key{D} or @key{Del}
@krindex delete
Delete the message currently being displayed.
@end table


@node Scanning and Searching, Options Functions, Message Functions, Reader Keystrokes
@subsection Reader Functions for Scanning and Searching for Messages
@cindex personal mail scan
@cindex new mail scan
@cindex mail scan
@cindex searching mails

@table @asis
@item Function: @code{scan}, bound to: @key{*}
@krindex scan
Scan all message areas for new messages.

@item Function: @code{scan_unscanned}, bound to: @key{#}
@krindex scan_unscanned
Scan message areas for new messages, but only scan areas that have not been
scanned previously.

@item Function: @code{pmail}, bound to: @key{Alt}-@key{P}
@cindex personal mail cscan
@krindex pmail
Personal mail scan: this scans all message areas for messages addressed to you.

@item Function: @code{spmail}, not pre-bound to any key
@krindex spmail
This scans for messages addressed to you in the current area only.
 
@item Function: @code{search}, bound to: @key{Alt}-@key{F}
@krindex search
@cindex searching
Allows you to search a message area for a specific keyword. The search
direction will be the direction that you previously moved into. For example,
in order to search a complete message area backwards for a certain mail, you
must press @key{End} to go to the end of the area, then press
@key{Left} in order to set the search direction to ``backwards'', and
then press @key{Alt}-@key{F} to start the search.

@item Function: @code{hdrsearch}, bound to: @key{Alt}-@key{Z}
@krindex hdrsearch
This works like @code{search}, but only scans message headers.
@end table

@node Options Functions, Misc Reader Functions, Scanning and Searching, Reader Keystrokes
@subsection Reader Functions for modifying @value{MSGED} Options

@table @asis
@item Function: @code{view}, bound to: @key{Alt}-@key{V}
@krindex view
@cindex kludge lines, showing or hiding
Toggle display of message control lines, kludge lines, etc.

@item Function: @code{config}, bound to: @key{Alt}-@key{S}
@krindex config
This function allows you to set some (but not all) of the system
switches. @xref{Switches,,Switches}, for more information.

@item Function: @code{chngaddr}, bound to: @key{Ctrl}-@key{W}
@krindex chngaddr
Change the origination address used for writing mail. You will not need this
key in normal operation, as @value{MSGED} employs an intelligent mechanism
for AKA matching.

@item Function: @code{chnodel}, bound to: @key{Ctrl}-@key{N}
@krindex chnodel
Change the currently active nodelist.

@item Function: @code{name}, bound to: @key{Ctrl}-@key{U}
@krindex name
If you have defined more than one user name with the @code{Name}
configuration keyword, you can use this function to select the name to use
when writing messages.
@end table

@node Misc Reader Functions,  , Options Functions, Reader Keystrokes
@subsection Miscellaneous other Reader Functions

@table @asis
@item Function: @code{export}, bound to: @key{Alt}-@key{W}
@krindex export
@cindex printing messages
@cindex exporting message text
Export the text of the current message to a file or printer port. You will be
shown a dialog box where you can enter a filename. @xref{Exporting and
Printing,,section Exporting Mails to Text Files or to the Printer}, for an
explanation of the modifiers for the filename you can use to control how the
output file is written.

@item Function: @code{shell}, bound to: @key{Alt}-@key{O}
@krindex shell
Call an operating system shell (prompt). Under DOS, @value{MSGED} is swapped
out of memory for this.

@item Function: @code{dos}, bound to: @key{!}
@krindex dos
Directly execute an operating system command.

@item Function: @code{null}, not pre-bound to any key.
@krindex null
Simply does nothing.

@item Function: @code{exit}, bound to: @key{Alt}-@key{X}, @key{Alt}-@key{A} and @key{Esc}
@krindex exit
Leave the message reading mode. Returns to the arealist screen.
@end table

@node Editor Keystrokes, Redefining the Keyboard, Reader Keystrokes, Keyboard Reference
@section Keyboard Commands and the internal Message Editor
@value{MSGED} has a built in message editor. It is suggested that, before you
start using an external editor for writing messages, you should at least try
to use the internal message editor, because it is best suited for composing
FTN-style messages. The internal message editor is highly configurable, so you
should be able to use the internal message editor with the same keyboard
setup as your preferred external text editor.

In the following, you will be shown a complete list of available message
editor functions. These functions are pre-bound to sensible keystrokes, which
are also listed in the following table. Each message editor function has a
unique name, and using this name, you can bind this function to any keystroke
that you might estimate to be adequate. Instructions on how to do this will
be given in the following section (@pxref{Redefining the Keyboard,,Redefining
the Keyboard bindings}).

@menu
* Cursor Movement::             Keystrokes for moving the cursor.
* Killing Text::                Keystrokes for deleting text.
* Text Block Commands::         Keystrokes for cut and paste functionality.   
* Miscellaneous Commands::      Other functions like saving, importing, etc.
@end menu

@node Cursor Movement, Killing Text, Editor Keystrokes, Editor Keystrokes
@subsection Editor Functions for Moving the Cursor

@table @asis
@item Functions: @code{left}, @code{right}, @code{up}, @code{down}
@keindex left
@keindex right
@keindex up
@keindex down
These functions are pre-bound to the cursor keys and move the cursor left,
right, up or down by one line.

@item Functions: @code{wordleft}, @code{wordright}
@keindex wordleft
@keindex wordright
These functions are pre-bound to @key{Ctrl}-@key{Left} and
@key{Ctrl}-@key{Right} and move the cursor to the beginning of the
previous or the beginning of the next word respectively.

@item Functions: @code{pgup}, @code{pgdn}
@keindex pgup
@keindex pgdn
These functions are pre-bound to the @key{PgUp} and @key{PgDn} (or on some
Unix boxes, @key{Prev} and @key{Next}) keys and scroll the text up or down by
one page and place the cursor accordingly.

@item Functions: @code{gobol}, @code{goeol}
@keindex gobol
@keindex goeol
These functions are pre-bound to the @key{HOME} and @key{END} keys and move
the cursor to the beginning or end of the current line.

@item Functions: @code{top}, @code{bottom}
@keindex top
@keindex bottom
These functions are pre-bound to the @key{Ctrl}-@key{PgUp} and
@key{Ctrl}-@key{PgDn} keys and move the cursor to the top or bottom
line of the current screen.

@item Functions: @code{first}, @code{last}
@keindex first
@keindex last
These functions are pre-bound to the @key{Ctrl}-@key{Home} and
@key{Ctrl}-@key{End} keys and move the cursor to the very first or
very last line of the mail that is currently being edited.

@item Function: @code{tab}, pre-bound to: @key{Tab}
@keindex tab
This function moves the cursor to the next tabulator position by inserting
whitespace characters (@emph{not} tabulator characters!) into the mail. The distance
between tabulator postitions can be adjusted with the @code{TabSize} keyword
in the configuration file (@pxref{Tabsize,,The @code{TabSize} Keyword}).

@item Function: @code{newline}, pre-bound to: @key{Enter}, @key{RET}
This function inserts a @emph{hard} carriage return and places the cursor to
the beginning of the next line. Note: Normally, hard carriage returns are
only inserted as paragraph delimiters or when posting formatted tables in
fidonet. For normal message text, you should @emph{not} press @key{Enter}
near the end of the line, but you should type a continous text (and leave the
wrapping to @value{MSGED}) and only press @key{Enter} once or twice at the
end of a paragraph. This will allow the receivers of your message to format
the message in a way that nicely fits their screen widths (not everybody is
using 80 column terminals!).
@end table

@node Killing Text, Text Block Commands, Cursor Movement, Editor Keystrokes
@subsection Editor Functions for Deleting text

@table @asis
@item Function: @code{backspace}, pre-bound to: @key{BS}
@keindex backspace
Kills the character on the left side of the cursor and moves the cursor back
one step.

@item Function: @code{del}, pre-bound to: @key{Del}
@keindex del
Deletes the character at the current cursor position.

@item Function: @code{deleol}, pre-bound to: @key{Alt}-@key{K}
@keindex deleol
Deletes all characters from the current cursor position to the end of the
line. This function has no effect if issued in an empty line.

@item Function: @code{delline}, pre-bound to: @key{Alt}-@key{D}, @key{Ctrl}-@key{Y}
@keindex delline
Deletes all characters in the current line and removes this line.

@item Function: @code{emacskill}, pre-bound to: @key{Ctrl}-@key{K}
@keindex emacskill
This function works like @code{deleol}, i.E. it kills all characters from the
current cursor position to the end of the line, but if issued in an empty
line, it removes that line. This is just what pressing
@key{Ctrl}-@key{K} does in the GNU Emacs editor.

@item Function: @code{killword}, pre-bound to: @key{Ctrl}-@key{T}
@keindex killword
Deletes all characters from the current cursor position to the end of the
current word.

@item Function: @code{undel}, pre-bound to: @key{Ctrl}-@key{U}
@keindex undel
This is a rather limited undelete function. It will restore lines that have
previously been killed with the @code{delline} function. It will not
restore single charactres that have been killed with @code{del},
@code{deleol}, @code{killword}, @code{emacskill} or similar functions.

@item Function: @code{zap}, pre-bound to: @key{Alt}-@key{L}
@keindex zap
This function is useful when using the quoted reply features. It will kill
all lines below the current cursor position that only contain quoted text
(these will usually be highlighted in a different color) until the next
unquoted line. This is useful to easily kill quoted signature text etc. Use
this to reduce the number of unnecessary quoted lines in your mails!

@end table

@node Text Block Commands, Miscellaneous Commands, Killing Text, Editor Keystrokes
@subsection Editor Functions dealing with Text Blocks
@cindex cut and paste

These functions provide cut'n'paste functionality:

@table @asis
@item Function: @code{anchor}, pre-bound to: @key{Alt}-@key{A}
This drops an anchor at the current cursor position. You have to drop two
anchors at different places, then the text between the two anchors will be
highlighted and treated as a selected text block.

@item Function: @code{cut}, pre-bound to: @key{Alt}-@key{C}
This will cut the currently selected text block (use @code{anchor} to select
a text block), i.E., it will delete all selected characters and store them in
an internal clipboard. Text that previously was stored in the clipboard will
of course be discarded.

@item Function: @code{paste}, pre-bound to: @key{Alt}-@key{P}
This will paste (insert) the text block from the clipboard (i.E. the last text
that has been cut with the @code{cut} function) at the current cursor
position.

@item Function: @code{unblock}, pre-bound to: @key{Alt}-@key{U}
Any anchors that have been dropped with the @code{anchor} function will be
removed, that is, any previously highlighted text will again be displayed
normally.

@end table

@node Miscellaneous Commands,  , Text Block Commands, Editor Keystrokes
@subsection Miscellaneous Editor Functions

@table @asis
@item Function: @code{abort}, pre-bound to: @key{ESC}
@keindex abort
Aborts the current message without saving.

@item Function: @code{bytecount}, pre-bound to: @key{Alt}-@key{B}
@keindex bytecount
Displays the number of bytes and the quote ratio in the current message.

@item Function: @code{edithdr}, pre-bound to: @key{Alt}-@key{E}
@keindex edithdr
Lets you edit the header of the message (recipient, sender and subject
information) in case you made an error when first entering the header.

@item Function: @code{export}, pre-bound to: @key{Alt}-@key{W}
@keindex export
Export the text of the current message to a file or printer port. You will be
shown a dialog box where you can enter a filename. @xref{Outfile,,The Outfile
configuration keyword}, for an explanation of the modifiers for the filename
you can use to control how the output file is written.

@item Function: @code{insert}, pre-bound to: @key{Ins}
@keindex insert
This function toggles between the ``insert'' and ``overwrite'' modes of the
editor.

@item Function: @code{import}, pre-bound to: @key{Alt}-@key{I}
@keindex import
@cindex importing text files into a message
Imports text from a text file into the message. You will be shown a dialog
box where you can enter a filename.

@item Function: @code{null}, not pre-bound to any key.
@keindex null
Simply does nothing.

@item Function: @code{oscmd}, pre-bound to: @key{Alt}-@key{1}
@keindex oscmd
This allows you to enter an operating system command that will be executed
directly.

@item Function: @code{setup}, bound to: @key{Alt}-@key{T}
@keindex setup
This function allows you to set some (but not all) of the system
switches. @xref{Switches,,Switches}, for more information.

@item Function: @code{shell}, bound to: @key{Alt}-@key{O}
@keindex shell
Call an operating system shell (prompt). Under DOS, @value{MSGED} is swapped
out of memory for this.

@item Function: @code{toggleq}, bound to: @key{Alt}-@key{Q}
@keindex toggleq
This function toggles the quote state of the current line (whatever that
means ...).

@item Function: @code{quit}, bound to: @key{Alt}-@key{S}
@keindex quit
This function saves the message currently being edited and quits the internal
message editor.

@end table



@node Redefining the Keyboard,  , Editor Keystrokes, Keyboard Reference
@section Redefining the Keyboard Bindings
@cindex keyboard bindings, redifining
@cindex redef

If you are dissatisfied with the default keyboard bindings, you can easily
change the keyboard layout. Each of the message reader and message editor
keyboard functions that have been listed on the previous pages can be
assigned an arbitrary keystroke using the @code{ReadKey} and @code{EditKey}
configuration keywords. The syntax of these commands is as follows:

@example
EditKey @var{keycode} @var{function-name}
ReadKey @var{keycode} @var{function-name}
@end example

The @var{keycode} parameter designates wich keystroke you want to
redefine. In order to find out the key code matching a certain keystroke,
invoke the executable of @value{MSGED} with the @samp{-k} option. You can
then press the desired keystroke, and @value{MSGED} will print out the key
code that you have to use as @var{keycode} parameter in the configuration
file. Here is an example session:

@example
[R:\mailer\msged]msgedp -k
Displaying keyboard scan codes in hexadecimal form.

Press any key or key combination, or 'q' (lowercase 'Q') to exit.
Key: 0x2100
Key: 0x0071 (q)
@end example

I pressed @key{Alt}-@key{F} and @kbd{q} to reproduce this
output. From the output, we can see that @key{Alt}-@key{F} has the
keycode @samp{0x2100}, and @kbd{q} has the keycode
@samp{0x0071}. Keycodes might vary depending on your hardware and operating
system. Also, on UNIX consoles sometimes keys are not mapped correctly at
all, in which case different key combinations might have the same key
code. If you find one where this is problematic, contact me for a bug report.

Now that you know the proper keycode, you can assign it to any reader or
editor function. @xref{Reader Keystrokes,, Keyboard Commands and Functions in
Message Reading mode}, for a complete list of available keyboard functions
for message reading mode. @xref{Editor Keystrokes,, Keyboard Commands and
Functions in the internal Message Editor}, for a complete list of available
keyboard functions in the built-in message editor.

As an example, let us assign the keystroke
@key{Alt}-@key{F} to the @samp{wordright} editor function:

@example
EditKey 0x2100 wordright
@end example

With this line in your configuration file, you will be able to press
@key{Alt}-@key{F} in order to move the cursor to the beginning of the
next word.

@node Configuration Reference, Compiling, Keyboard Reference, Top
@chapter @value{MSGED} Configuration Reference
@value{MSGED} has to be configured using a configuration file. This is a
plain text ASCII file containing a list of keywords, settings and switches
that define the behaviour of @value{MSGED}. The configuration file is named
@file{msged.cfg} and should normally be placed in the current working
directory of @value{MSGED}. (On Linux/Unix, it is named @file{.msged} instead
and placed in your home directory).

This chapter describes the syntax of the configuration file and lists all
avilable keywords and switches in alphabetical order.

@menu
* Syntax::                      Configuration file syntax
* Keywords::                    Keywords for use in the configuration file.
* Switches::                    Switches for use in the configuration file.
* Conditionals::                Conditional Statements (IF/ELSE/ENDIF).
* Area Definitions::            How to define message areas
@end menu

@node Syntax, Keywords, Configuration Reference, Configuration Reference
@section Configuration File Syntax
@cindex environment variables, using 
@cindex comments, configuration file
Each line in the configuration file should start with a keyword. Each
keyword can be followed by zero or more free-form parameters. 

A special case of a keyword is the @samp{switch} keyword. Using the
@samp{switch} keyword, a switch can be turned either on or
off. @pxref{Switches}, for more information.

When parsing the config file, lines that start with a semicolon or with a
semicolon preceeded only by whitespace are treated as comments.

Within the configuration file, you may use environment
variables. Enclose the name of the environment variable within percent
signs. For example, if you give a command like @samp{"Areafile
%MAILBOX%\squish\squish.cfg"}, the string @samp{%MAILBOX%} would be
replaced with the value of the environment variable @samp{MAILBOX}.

You can also disable or enable certain parts of the configuration file based
on the value of environment variables or on the operating system by
using Conditionals. @xref{Conditionals, Conditional Statements in the
Configuration File}, for more information.

@node Keywords, Switches, Syntax, Configuration Reference
@section Configuration File Keywords
The following keywords can be used in the configuration file. Keywords
are generally case-insensitive.

@menu
* Address::                     Specifying your FTN AKAs.
* Alias::                       Your personal address book.
* Alterfunc::                   
* AreaExcl::                    Excluding areas from the area list.
* Areafile and AreaFileFlags::  Reading squish.cfg or fastecho.cfg.
* AssumeCharset::               Workaround for mails without CHRS kludges.
* Color::                       Configuring the screen colors.
* Colour::                      
* CurStart/CurEnd::             Configuring the cursor shape.
* Domain::                      About Domain Gating.
* EditKey::                     Configurint the editor's keyboard layout.
* Editor::                      Selecting the internal or an external editor.
* EnableSC::                    Enabling input of ``Umlauts'' on Unix.
* Fido::                        Specifying a Fido *.MSG format mail area
* FreqArea::                    Specifying an area to place file requests in.
* Function::                    Creating keyboard macros.
* Gate::                        Enabling Domain- and/or Zone gating.
* Group::                       Different templates for different areas.
* HelpFile::                    Enabling online help.
* Include::                     Including other configuration files.
* Lastread::                    Handling of the lastread pointer.
* MaxX and MaxY::               Hard-wiring the terminal size.
* MountDir::                    DOS to Unix path translation.
* Name::                        Configuring the Sysop's name.
* NodePath::                    Where to find the nodelist files.
* Nodelist::                    Configuring a V7 nodelist index.
* Origin::                      Choosing one or multiple origin lines.
* Outfile::                     Selecting a default export file name.
* OutputCharset::               Selecting the charset to use for umlauts.
* PrivateNet::                  Nobody needs this.
* Quick::                       Specifying a QuickBBS/Hudson format mail area.
* QuickBBS::                    Specifying a QuickBBS/Hudson format mail area.
* Quote::                       Configuring the quote characters.
* QuoteRight::                  Configuring the right margin for quoting.
* ReadKey::                     Modifying the keyboard layout.
* Right::                       Selecting the right margin for message display.
* RobotName::                   Do not use templates for Areafix mails :-)
* Scan::                        Enabling auto-scan on program startup.
* SoftCrXlat::                  
* SortAreas::                   Sort message areas by name or group.
* Squish::                      Specifying a Squish format mail area.
* SwapPath::                    DOS users need this @dots{}
* Switch::                      Turning configuration switches on or off.
* Tabsize::                     How many spaces shall a @key{Tab} key insert?
* Template::                    Signoff, Signature, et cetera.
* TossLog::                     Creating @file{ECHOTOSS.LOG} entires.
* UserList::                    Using a @file{FIDOUSER.LST} sysop list.
* UserOffset::                  Each user has a different lastread pointer.
* UUCP::                        Configuring your internet gateway.
* UucpName::                    Configuring your internet gateway.
@end menu


@node Address, Alias, Keywords, Keywords
@subsection Address
@findex Address
@table @asis
@item Syntax:
@code{Address @var{AKA}}
@item Example:
@code{Address 2:2476/418.0}
@end table

The @code{Address} command specifies your FTN network address.
@var{AKA} is a FTN network address with up to five dimensions. The
@code{Address} keyword can be repeated as often as is desired to specify
multiple addresses.

@node Alias, Alterfunc, Address, Keywords
@subsection Alias
@findex Alias
@table @asis
@item Syntax:
@code{Alias @var{alias} "@var{name}" @var{address} [@var{attribute} ["@var{subject}"]]}
@item Examples:
@code{Alias tobias "Tobias Ernst" 2:2476/418.0}
@item
@code{Alias tobi "tobi@@bland.fido.de" UUCP}
@item
@code{Alias af "Areafix" 2:2476/418.0 p "PASSWORT"}
@end table

Aliases are used to simplify the entry of new messages. When you enter a new
message and type in the previously defined @var{alias} into the name field,
all the other fields will be filled in with the values that you have provided
in the alias definition. You must at least specify the sysop's @var{name} in
quotation marks and the corresponding FTN @var{address} in up to five
dimensions.

Alternatively, you may specify @samp{UUCP} as @var{address}. In this case,
the @var{name} field is interpreted as an internet e-mail address and the
mail is addressed to the corresponding gateway.

Optionally, you may also specify one or more message attributes and a message
@var{subject}. The @var{attribute} field is a combination of one or more of the
following letters:

@table @code
@item p
private
@item h
hold
@item c
crash
@item k
kill/sent
@item n
normal (no attributes)
@end table

Note that you must always specify at least one message attribute
(at least @samp{n}) if you want to specify a subject.


@node Alterfunc, AreaExcl, Alias, Keywords
@subsection Alterfunc
@findex Alterfunc
This keyword is presently undocumented.

@node AreaExcl, Areafile and AreaFileFlags, Alterfunc, Keywords
@subsection AreaExcl
@cindex excluding certain areas
@cindex areas, excluding from display
@findex AreaExcl

@table @asis
@item Syntax:
@code{AreaExcl @var{pattern}}
@item Example:
@code{AreaExcl ALT.BINARIES.*}
@end table

This keyword is used to exclude certain areas from the area selection
menu. All area names that match @var{pattern} will not be displayed in the
area selection menu and thus will not be accessible. The @var{pattern}
parameter may be a simple area name or a wildcard pattern containing the
joker characters @samp{*} and @samp{?}.

You must specify the @code{AreaExcl} keyword in the configuration file
@emph{before} the @code{Squish}, @code{Fido}, @code{Quick} and
@code{Areafile} keywords.

@node Areafile and AreaFileFlags, AssumeCharset, AreaExcl, Keywords
@subsection Areafile and AreaFileFlags

These keywords are documented in the section about area configuration
(@pxref{Areafile Parsing,,Reading a Tosser Configuration File (Areafile)}).

@node AssumeCharset, Color, Areafile and AreaFileFlags, Keywords
@subsection AssumeCharset
@cindex default character set
@cindex character set, default for reading
@findex AssumeCharset

@table @asis
@item Syntax:
@code{AssumeCharset @var{charset}}
@item Example:
@code{AssumeCharset IBMPC}
@end table

In Fidonet mail, mails that contain special characters must carray a charset
kludge line (@pxref{Special Characters,,Using Special Characters -
The FSC 0054 Charset Kludge}). However, still a good percentage of
fidonetmail contains special characters, but no charset kludge line.

By default, @value{MSGED} will replace all special characters with question
marks in mails without charset kludge, because @value{MSGED} does not know
how to properly translate such special characters. If you do not like this,
you can use the @code{AssumeCharset} keyword to specify that @value{MSGED}
should assume that all special characters in mails that do not contain a
charset kludge have been composed using the character set @var{charset}, and
translate the special characters accordingly.

In Germany, for example, nearly all mail that contains special characters but
does not contain a charset kludge has been composed using the IBMPC character
set, so it makes sense to specify @samp{AssumeCharset IBMPC} here.

@node Color, Colour, AssumeCharset, Keywords
@subsection Color
@cindex color settings
@cindex colour settings
@findex Color

@table @asis
@item Syntax:
@code{Color @var{item} @var{foreground} _@var{background}}
@item Example:
@code{Color MainNorm White _Black}
@end table

Use this to customize the colors that @value{MSGED} uses. For a list of
available color values and items, refer to the sample color scheme files.

If you are using the Unix version of @value{MSGED}, you must also switch on the
@code{Colors} switch in order to get a non-monochrome display. @xref{Colors
in the Unix version,, Colors in the Unix version}, for more information.

@c FIXME better documentaiton of color shemes

@node Colour, CurStart/CurEnd, Color, Keywords
@subsection Colour
@findex Colour

@code{Colour} is an alternative name for the keyword @code{Color}
(@pxref{Color, The @code{Color} Keyword}.

@node CurStart/CurEnd, Domain, Colour, Keywords
@subsection CurStart, CurEnd
@findex CurStart
@findex CurEnd
@cindex cursor shape
@table @asis
@item Syntax:
@code{CurStart @var{row}}
@item
@code{CurEnd @var{row}}
@item Example:
@code{CurStart 5}
@item
@code{CurEnd 7}
@end table

This keyword is used to control the shape of the cursor (only on terminals
and operating systems that support it). On typical DOS-like consoles, the
cursor constis of 8 rows, labelled top-down from zero to seven. You can
specify a cursor start @var{row} and a cursor end @var{row}. The
@value{MSGED} default values of 6 (start) and 7 (end) result in a standard
"underline" cursor.

If you are using @value{MSGED} with a monochrome display adapter like MDA,
MGA or HGC, the cursor consists of 14 rows instead of 8. There, you will have
to use the @code{CurStart} and @code{CurEnd} keywords to produce a sensible
cursor shape. Values of 11 for start and 12 for end are suggested for mono
display adapters.

@node Domain, EditKey, CurStart/CurEnd, Keywords
@subsection Domain
@findex Domain
@cindex domain gateway
@table @asis
@item Syntax:
@code{Domain @var{5d-address}}
@item Example:
@code{Domain 8:123/45@@rbbs}
@end table

Messages sent with the destination domain equal to the domain of one of the
configured domain gates will always be sent to the domain gate with a @@DOMAIN
kludge inserted into the message.  To enable domain gating, you must
configure all domain gates you are using in your config file by using a
@code{Domain} keyword with the full 5D address of the domain gateway
(including the domain that this gate is gating for) as @var{5d-address}
parameter for each domain gate. You also must have the @code{Gate} config
verb set to either @samp{both} or @samp{domains}. @xref{Gate,, The
@code{GAte} Keyword}, for more information.

With this done, @value{MSGED} will gate any messages being saved with a
destination domain listed as one of the gates.  Note that for this to occur,
the destination domain must be different than your own.

Confused? Luckily enough, most users don't have to deal with domain gating
@dots{}

@node EditKey, Editor, Domain, Keywords
@subsection EditKey
@findex EditKey
@table @asis
@item Syntax:
@code{EditKey @var{key} @var{function}}
@end table

This keyword is used to redefine the keyboard layout in the internal message
editor. @xref{Redefining the Keyboard,,Redefining the Keyboard}, for more information.

@node Editor, EnableSC, EditKey, Keywords
@subsection Editor
@findex Editor
@cindex external editor
@table @asis
@item Syntax:
@code{Editor @var{program-name}}
@item Example:
@code{Editor c:\boxer\b2.exe}
@end table

This command allows you to specify an external editor to use when writing
messages.  The editor program (specified as executable filename with full
path as the @var{program-name} parameter) must accept a filename as the first
and only parameter.

Before you decide to use an external editor, you might first want to look at
the built-in editor of @value{MSGED}. Using the @code{EditKey} keyword, the
built-in editor is highly configurable to emulate the keystroke combination
that you are used to use from your preferred external editor, and you can
safe a lot of unnecessary overhead and gain a lot of comfort when using the
internal editor as compared to the external one.

@node EnableSC, Fido, Editor, Keywords
@subsection EnableSC
@findex EnableSC
@cindex special characters, on UNIX
@table @asis
@item Syntax:
@code{EnableSC @var{string}}
@item Example:
@iftex
@code{EnableSC} "a@"o@"u@"A@"O@"U
@end iftex
@ifinfo
@code{EnableSC} @var{type-national-characters-here}
@end ifinfo

@end table

(The example from above will only look correct in the TeX (@file{.DVI} or
@file{.PS} or @file{.PDF}) edition of this document. It should be an a dieresis, o dieresis,
u dieresis, A dieresis, O dieresis, U dieresis, and a sharp s in true 8 bit
special characters.)

This keyword is only relevant on UNIX. On UNIX, when using a VT100, xterm, or
similar terminal, @key{Alt} or @key{Meta} key combinations generate the same
key codes like national characters with ASCII values greater than 127. This
is a problem, because on the one hand, @value{MSGED} relies on combinations
of normal keys with Alt, but on the other hand, you probably want to use
national special characters in your mail.

By default, the UNIX version of @value{MSGED} enables all @key{Alt} key
combinations and disables all national special characters. You can then use
the @code{EnableSC} keyword to selectively enable national special
charcters. All special characters that occur in the @var{string} given as
argument will be interpreted as charcters rather then @key{Alt} key
combinations.

The example from above enables all German national charcters. The only
relevant @key{Alt} key combination that you will loose by enabling those
characters is @key{Alt}-@key{V} (``show notes''). This function is also
available by pressing @key{Alt}-@key{K} (``show kludges''), so that
isn't a problem.

Note that you will have to use an editor that allows the input of national
charcters in order to generate the necessary configuration file
entry. @code{vi} should be able to do this, as well as @code{joe}. If you are
not able to type those characters in vi, you should not even try to type them
in @value{MSGED} @dots{}

If you need information on how to set up a FreeBSD system to correctly
process special national characters, you can f`req @file{syscons.tgz} at
2:2476/418.

@node Fido, FreqArea, EnableSC, Keywords
@subsection Fido

This keyword is described in the section about manual message area definition
(@pxref{Manual Area Definition,, Manual Area Definition}).

@node FreqArea, Function, Fido, Keywords
@subsection FreqArea
@findex FreqArea
@table @asis
@item Syntax:
@code{FreqArea @var{area-tag}}
@item Example:
@code{FreqArea NETMAIL}
@end table

This keyword defines the message area where file request messages will be
written when the @key{Ctrl}-@key{F} function is invoked.  If not
defined, @samp{NETMAIL} is the default areatag.  Only one file request area
may be defined.

@node Function, Gate, FreqArea, Keywords
@subsection Function
@findex Function
@cindex function key macros
@cindex macros
@cindex keyboard macros
@table @asis
@item Syntax:
@code{Function @var{number} @var{keystrokes}}
@item Example:
@code{Function 11 \0x17D:\\text\\*.*^M}
@end table

A function key macro is a predefined keystroke sequence that is assigned on a
function key. If you press this function key, @value{MSGED} will do exactly what it
would have done if you have typed in all the keystrokes of this macro
manually.

The following function key numbers (to be used as the @var{number} parameter)
are available:

@table @code
@item 0
Execute this macro at program startup.
@item 1 .. 10
@key{F1} .. @key{F10}
@item 11 .. 20
@key{Shift}-@key{F1} .. @key{Shift}-@key{F10}
@item 21 .. 30
@key{Ctrl}-@key{F1} .. @key{Ctrl}-@key{F10}
@item 31 .. 40
@key{Alt}-@key{F1} .. @key{Alt}-@key{F10}
@end table

Note that function key numbers 11 through 40 might not work on Unix.

When using key scancodes in a macro, you must escape them with a backslash
character (@samp{\}).  If you wish to have a literal backspace character
appear in the macro string (e.g. if it's needed as part of a path to a
file), use two backslash characters, like in the example above.

The example from above will assign @key{Shift}-@key{F1} to display a
pick list of the files in the @file{D:\TEXT} directory.  After the list is
displayed, you may select a file to import into a message while in Msged's
internal editor.  Note that control characters in a macro such as ^M
(Enter) must be written in UPPER case.

@node Gate, Group, Function, Keywords
@subsection Gate
@findex Gate
@cindex zone gating
@table @asis
@item Syntax:
@code{Gate @var{what}}
@item Examples:
@code{Gate Zones}
@item
@code{Gate Domains}
@item
@code{Gate Both}
@end table

The @var{what} parameter to the @code{Gate} keyword specifies if
@value{MSGED} should do zone gating (@code{Gate Zones}), domain gating
(@code{Gate Domains}), or both (@code{Gate Both}). This has nothing to do
with internet gateways.

Domain gating is explained in detail in the section about the @code{Domain}
keyword (@pxref{Domain,,The @code{Domain} Keyword}).

Zone gating works like this: If you write a mail to a different zone and zone
gating is enabled, the mail will not be addressed to the receiver in the
other zone, but it will be addressed to that zone's zone gate (which also has an
address inside your own zone). The address of the true receiver will be
encoded in an @@INTL kludge line.

I strongly recommend to at least enable zone gating, because I found that it
is the only way to really reliable route inter-zone netmail. (In that point,
I object the original MsgEd documentation's author's opionion).

@node Group, HelpFile, Gate, Keywords
@subsection Group
@findex Group
@cindex groups of areas
@table @asis
@item Syntax:
@code{Group "@var{substring}" @var{name-index} @var{template-index}}
@item Example:
@code{Group "OS2" 0 1}
@end table

This command allows you to form groups of areas for which different
templates and user names are used. For example, you might wish to use a
different signoff in OS/2-related areas (probably stating your TeamOS/2
number) than in other areas. Or, if you are moderator in a certain area, you
might want to use the user name "Moderator" instead of the user name that you
are using in normal areas.

The @var{substring} parameter to the @code{Group} command specifies a
substring that must be present in the area tag in order to make the area a
member of this group.

The @code{name-index} parameter then specifies the index number of the user
name that should be used for all areas in this group. User names are counted
from zero upwards, so if you have two or more @code{Name} keywords in your
config file, the name specified with the first @code{Name} keyword will have
an index number of 0, the second will have 1, and so one. @xref{Name,,The
@code{Name} Keyword}, for more information.

The @code{template-index} number defines which message template file should
be used for areas belonging to this group. The first message template file
that you have specified with the @code{Template} keyword has number 0, the
second has number 1, and so on.

@c FIXME @xref{Template,,The @code{Template} Keyword}, for more information.

@node HelpFile, Include, Group, Keywords
@subsection HelpFile
@findex HelpFile
@table @asis
@item Syntax:
@code{HelpFile @var{file-name}}
@item Example:
@code{HelpFile e:\fido\msged\msghelp.dat}
@end table

Specify the complete path and file name of the compiled @value{MSGED} help
file here. It is usally named @file{msghelp.dat}, or @file{~/.msged.help} on
Unix.

@node Include, Lastread, HelpFile, Keywords
@subsection Include
@findex Include
@table @asis
@item Syntax:
@code{Include @var{file-name}}
@item Example:
@code{Include scheme.001}
@end table

The file specified with the @var{file-name} parameter will be read in and
parsed as a normal config file. This is often used for including color scheme
configuration files.

@node Lastread, MaxX and MaxY, Include, Keywords
@subsection Lastread
@findex Lastread
@table @asis
@item Syntax:
@code{Lastread @var{lastread-file}}
@item Example:
@code{Lastread LASTREAD}
@end table

The @var{lastread-file} parameter of this keyword specifies the name of the
``lastread file''  that is used to store lastread pointers for Fido *.MSG
areas. It should always be @file{LASTREAD}.

In contrast to the @var{lastread-file} parameter of the @code{Name} keyword,
the @var{lastread-file} parameter globally changes the name of the lastread
file for all users instead of only for a specific user name. @xref{Name,,The
@code{Name} Keyword}, for more information.

@node MaxX and MaxY, MountDir, Lastread, Keywords
@subsection MaxX, MaxY
@findex MaxX
@findex MaxY
@cindex screen size
@table @asis
@item Syntax:
@code{MaxX @var{columns}}
@item
@code{MaxY @var{rows}}
@item Example:
@code{MaxX 80}
@item
@code{MaxY 25}
@end table

The @code{MaxX} and @code{MaxY} keywords are used to define the screen or
text window size @value{MSGED} is running in. Normally this will be
autodetected and @value{MSGED} will automatically use the full window
size. For example, on OS/2, you could execute @samp{MODE CO100,40} and then
start @value{MSGED}, and it will automatically use 100 columns and 40 rows.

In some cases, however, the autodetection fails, or you might not want
@value{MSGED} to use the full screen size. In this case, you have to define
the screen or window size manually with the @code{MaxX} and @code{MaxY}
parameters.

@node MountDir, Name, MaxX and MaxY, Keywords
@subsection MountDir
@findex MountDir
@table @asis
@item Syntax:
@code{MountDir @var{unix-path} @var{dos-path}}
@item Example:
@code{MountDir /mnt/c c:\}
@end table

This keyword is used to tell the Unix version of @value{MSGED} how it can
translate DOSish pathnames found in @file{squish.cfg}, @file{fastecho.cfg} or
even @file{msged.cfg} files that are mounted via NFS, rumba or smbfs from a
DOS, OS/2 or Windows machine.

Suppose you are having a message base that is stored in @samp{c:\msgbase} on
your OS/2 or Windows machine. Also suppose that your complete C: drive on the
OS/2 or Windows machine is mounted as /mnt/c on the UNIX machine. (The
Windows machine and UNIX machine can be two distinct machines connected via
network, or a single machine with multi boot, where UNIX can mount the OS/2
or DOS partitions).

You can then install @value{MSGED} on the Unix machine and let it read in the
same configuration files that are also used on the OS/2 or Windows
machine. Simply put @code{MountDir /mnt/c c:\} into your configuration
file. When @value{MSGED} is running on OS/2 or Windows, it will ignore the
keyword, but when it is running on Unix, it will know how to translate the
DOS-like filenames found in the corresponding configuration files into file
names that are correct for the UNIX system.

Please note that you can have only one @code{MountDir} statement in the
configuration file.

@node Name, NodePath, MountDir, Keywords
@subsection Name
@findex Name
@table @asis
@item Syntax:
@code{Name "@var{name}" [@var{lastread-file} [@var{user-offset}]]}
@item Examples:
@code{Name "Tobias Ernst"}
@item
@code{Name "Joe Sysop"  LASTREAD 0}
@item
@code{Name "Jane Sysop" LASTREAD 1}
@end table

You can specify your user name as the @var{name} parameter inside quotation
marks here. You can specify more than one user name by repeating the
@code{Name} keyword. Then, you can select which name to use during program
execution by pressing @key{CTRL}-@key{U}.

Optionally, you can use the @var{lastread-file} parameter to specify the name
of the file that stores the lastread pointers in Fido *.MSG areas. This one
should always be named @samp{LASTREAD}.

As a third parameter, you can specify a @var{user-offset} for each individual
name. The logic behind the user offset is as follows: Each distinct user of
your message base should have his own lastread pointer. All lastread pointers
are stored in a lastread file (@file{LASTREAD} for Fido *.MSG, @file{*.SQL}
for squish). Each user who wants to have a separate lastread pointer must have
a unique @dfn{user offset} into the lastread pointer file.

Normally, the sysop has a user offset of zero (which is the default for the
@var{user-offset} parameter), and each BBS user has his user number as user
offset. However, if you have two or more sysops (in this context, this simply
means persons accessing your message base directly with @value{MSGED} instead
of using the BBS), you must manually assign unique user offset numbers for
each person.

@node NodePath, Nodelist, Name, Keywords
@subsection NodePath
@findex NodePath
@cindex nodelist path
@table @asis
@item Syntax:
@code{NodePath @var{path-name}}
@item Example:
@code{NodePath e:\fido\nodelist}
@end table

@value{MSGED} can use compiled version 7 nodelists to perform nodelist
lookups. All files pertaining to all version 7 nodelists, i.E. the compiled
index files and the raw nodelist files, must be stored in the V7 nodelist
directory. The @code{NodePath} keyword is used to tell @value{MSGED} that all
v7 nodelist files reside in the directory named
@var{path-name}. @xref{Nodelist,,The @code{Nodelist} Keyword}, for more
information.

@node Nodelist, Origin, NodePath, Keywords
@subsection Nodelist
@findex Nodelist
@cindex V7 nodelist
@cindex version 7 nodelist
@cindex compiled v7 nodelist
@table @asis
@item Syntax:
@code{Nodelist @var{domain-name} @var{base-name} @var{sysop-file}}
@item Example:
@code{Nodelist fidonet nodex sysop.ndx}
@end table

@value{MSGED} can use compiled version 7 nodelists to perform nodelist
lookups. With the @code{Nodelist} keyword, you specify the v7 nodelists that
@value{MSGED} should use. All three parameters are mandatory.

The @var{domain-name} parameter specifies the name of the domain that is
used when picking which nodelist to use for address lookup if the zone number
is not unambiguous. The @var{base-name} parameter specifies the base name of
the index file minus the extension (e.g. @samp{nodex} for @samp{nodex.idx}),
and @var{sysop-file} is the name of the sysop lookup file. You must not
specify any path names for the latter two parameters - these files must
always reside in the directory pointed specified as argument to
@var{NodePath}. @xref{NodePath,,The @code{NodePath} Keyword}, for more
information.

Normally, you will compile all raw nodelists that you have into a single
v7 index. In this case, simply use the example from above. You will only have
to bother about separate indices, domain names and the like if you have two
distinct othernets with identical zone numbers.

@node Origin, Outfile, Nodelist, Keywords
@subsection Origin
@findex Origin
@cindex origin line
@cindex origin shuffling
@table @asis
@item Syntax:
@code{Origin @var{string}}
@item Example:
@code{Origin We love @value{MSGED}!}
@end table

The origin line terminates an echomail and tells the sender`s FTN
address. Thus it has an important technical function. On the other hand, the
origin line also leaves space for about 55 bytes of free-form text. They can
be used to place your BBS system's name there, but you can also place other
meaningful or meaningless messages there. The text that you specify as the
@var{string} parameter may include whitespace characters. It will simply be
copied into the origin line, but be aware of the fact that @value{MSGED}
might have to truncate the text in order to prevent the origin line from
getting longer than 79 characters.

You can use macro tokens in the origin line to provide some sort of dynamic
information. The macros will be expanded to their value when the message is
saved. The following macros can be used:

@table @code
@item @@N
full name of message receiver
@item @@F
first name of message receiver
@item @@L
last name of message receiver
@item @@Y
full name of message author
@item @@D
complete message date (as for example: @samp{24 Dec 97})
@item @@DD
message date, day number (as for example: @samp{24})
@item @@DW
message date, week day (as for example: @samp{Mon})
@item @@DM
message date, month (as for example: @samp{Dec})
@item @@DY
message date, 2 digit year (as for example: @samp{97})
@item @@D4
message date, 4 digit year (as for example: @samp{1997})
@item @@DC
message date, century (as for example: @samp{20})
@item @@T
complete message time (as for example: @samp{12:30:24})
@item @@S
message subject
@item @@A
area tag
@item @@I
message size
@item @@Q
quote ratio
@item @@@@
a single @@ character
@end table

In @value{MSGED}, you can also specify more than one @code{Origin} keyword in
the configuration file. @value{MSGED} will then automatically select a random
line out of those that you have specified each time that it has to generate
an origin line. This feature is called @dfn{origin shuffling}.

@node Outfile, OutputCharset, Origin, Keywords
@subsection Outfile
@findex Outfile
@cindex exporting mails as text
@cindex printing
@table @asis
@item Syntax:
@code{Outfile @var{file-name}}
@item Example:
@code{Outfile export.txt,t}
@end table

This keyword is used to configure the default @var{file-name} that should be
used for exporting mails as text by pressing @key{Alt}-@key{W}. You can
change this value at runtime; here, you just configure the default that the
dialog box will be filled in with. You can specify a normal file name, or you
can specify a special file name designating a device like for example
@samp{LPT1:}. On Unix, you can also a program that the text should be piped to.

The default format for exporting text is to write it in raw format, that is,
carriage returns will only be placed at the end of each paragraph, and no
message header will be added. This format is useful if you later wish to
re-import the text into @value{MSGED}, but it is not suitable for printing or
editing with "standard" text editors.

The default format can be changed by appending a suffix to the filename. If
you append the filename with @samp{,t}, like in the example above, a carriage
return will be placed after each line of text, and a message header will be
put in front of the text. This format is well suited for printing (use
@samp{lpt1:,t} to print the mail), or for using the mail in standard text
editors.

If you append @samp{,q} to the filename, the text will be exported in quote
format.  This means that an attribution line will be added to the beginning
of the message and each line will be preceded by the quote string.

Putting a @samp{+} in front of the filename will cause the text to be
appended to the file.  Otherwise the file will be overwritten.

Putting a @samp{|} in front of the filename will cause the filename to be
interpreted as an operating system command and the text will be piped to this
command. This only works on Unix and EMX-compiled OS/2.

Putting a @samp{?} in front of the filename indicates you want to be asked
whether to append or not, and how to write out the file.  Some menus will
appear and you choose the action you want.

@xref{Exporting and Printing,,Exporting Mails to Text Files or to a Printer},
for more information.

@node OutputCharset, PrivateNet, Outfile, Keywords
@subsection OutputCharset
@findex OutputCharset
@cindex character set, for writing messages
@table @asis
@item Syntax:
@code{OutputCharset @var{charset}}
@item Example:
@code{OutputCharset LATIN-1}
@end table

This specifies which character set should be used for writing messages with
special characters (like umlauts, accents, IBM graphics). The mail will be
converted into the given charset, and the proper charset kludge will be
appended. This does only apply to areas which have the @samp{8} flag set,
because in all other areas, the messages will always be converted into a
7-bit ASCII representation.

The charset that you specify as @var{charset} argument must be a level 2
charset, and a matching translation table must be contained in the
@file{writmaps.dat} file. If there isn't such a table, you will only see this
from the fact that the written message will contain 8-bit characters, but no
charset kludge(!). So be careful not to misspell the option.  If you use the
@file{writmaps.dat} that shipped with @value{MSGED}, you have the following
options:

@table @code
@item IBMPC
Specify this if you want to export IBM graphics characters, or if you want to
be compatible with old DOS software that does not know about character set
translation with charset kludges.

@item MAC
Specify this if you want to be compatible with old Macintosh softare that
does not know about charset kludges.

@item LATIN-1
This is the ISO 8859 standard character set. It is always a good choice as
long as you do not want to use IBM graphics characters.

@item CP850
@value{MSGED} supports the @code{CP850} charset kludge, but you should use it
as output charset, because quite a few other editors do not support it.
@end table

The character does not need to match the charset that your computer is using
internally; @value{MSGED} will do all necessary conversion.

@xref{Special Characters,,Using Special Characters - The FSC 0054 Charset
Kludge}, for more information.

@node PrivateNet, Quick, OutputCharset, Keywords
@subsection PrivateNet
@findex PrivateNet
@cindex privatenets
@cindex pointnets
@cindex fakenets
@table @asis
@item Syntax:
@code{PrivateNet @var{fakenet-number}}
@item Example:
@code{PrivateNet 12345}
@end table
Modern mailers, message reader/editors (including @value{MSGED}), and mail
processing programs are fully 4D address aware and do not require the
@code{PrivateNet} keyword.  However, if you are operating a point system
whose boss node uses a "fakenet" to service points, this keyword should be
used.

The @var{fakenet-number} parameter specifies the private net number number to
use for non-4D points. The fakenet point scheme was designed to work with
systems which were unable to support true points, such as BinkleyTerm 2.40
and lower.  The actual "fakenet" number and address must be assigned to you
by your boss node.

@node Quick, QuickBBS, PrivateNet, Keywords
@subsection Quick

This keyword is described in the section about manual message area definition
(@pxref{Manual Area Definition,, Manual Area Definition}).

@node QuickBBS, Quote, Quick, Keywords
@subsection QuickBBS
@findex QuickBBS
@cindex hudson message base path
@cindex HMB file path
@table @asis
@item Syntax:
@code{QuickBBS @var{path-name}}
@item Example:
@code{QuickBBS e:\fido\hmb}
@end table

In order to use a hudson message base (also known as Quick BBS message base),
you have to specify the path where the HMB files are stored using the
@var{path-name} parameter of the @code{QuickBBS} keyword. You must specify
the @code{QuickBBS} keyword in the configuration file before any @code{Quick}
or @code{AreaFile} keyword.

@node Quote, QuoteRight, QuickBBS, Keywords
@subsection Quote
@findex Quote
@cindex quote string
@table @asis
@item Syntax:
@code{Quote @var{quote-string}}
@item Example:
@code{Quote _&>_}
@end table

When quoting a mail, every line of quoted text will be prefixed with
@var{quote-string}. The following tokens inside the quote string have special
meanings:

@table @code
@item &
will be replaced with all initials of the writer of the quoted message
@item _
will be replaced with a whitespace
@item ^
will be replaced with the first initial of the writer of the quoted message
@item *
will be replaced with the second initial of the writer of the quoted message
@end table

Following common fidonet practice, you should use @samp{_&>_} as quote string.

@node QuoteRight, ReadKey, Quote, Keywords
@subsection QuoteRight
@findex QuoteRight
@cindex right margin, for quoted text
@table @asis
@item Syntax:
@code{QuoteRight @var{column}}
@item Example:
@code{Quoteright 75}
@end table

The @var{column} argument specifies the right margin to use when quoting
text. Because quoted text - in contrast to normal text - is stored with a
carriage return after each line, you should not specify a value greater than
75 in order to assure that the text can be displayed on standard 80 columns
displays without problems.

@node ReadKey, Right, QuoteRight, Keywords
@subsection ReadKey
@findex ReadKey
@table @asis
@item Syntax:
@code{ReadKey @var{key} @var{function}}
@end table

This keyword is used to redefine the keyboard layout in message reading
mode.  @xref{Redefining the Keyboard,,Redefining the Keyboard}, for more information.

@node Right, RobotName, ReadKey, Keywords
@subsection Right
@findex Right
@cindex right margin, for normal text
@table @asis
@item Syntax:
@code{Right @var{column}}
@item Example:
@code{Right 79}
@end table

The @var{column} argument specifies the right margin to use when writing
normal text. Normally, there is no reason to use this parameter, as
@value{MSGED} will always simply use the width of the window or console it is
running in. Please note that because of the way text is stored in Fidonet
messages (carriage returns are only placed at the end of a paragraph), it is
no problem to use right margins higher than 80. Even then, users with only 80
columns will still be able to read your message nicely formatted.

@node RobotName, Scan, Right, Keywords
@subsection RobotName
@findex RobotName
@table @asis
@item Syntax:
@code{RobotName @var{name}}
@item Example:
@code{RobotName Areafix}
@end table

Using the @var{name} parameter of the @code{RobotName} keyword, you can
specify names of robot machines like Areafix, Allfix, VoteMgr and so on. Each
@code{RobotName} keyword only accepts a single @var{name} parameter, but you
may repat the @code{RobotName} keyword as often as necessary.

The reason for defining the names of common fidonet robots is the following:
When writing a mail that is addressed to a user name that matches one of the
defined robot names, @value{MSGED} will not insert the usual message
template. (VoteMgr will be confused if the first line in your Message is
"Hello VoteMgr" instead of the expected meta command @dots{}).

@node Scan, SoftCrXlat, RobotName, Keywords
@subsection Scan
@findex Scan
@table @asis
@item Syntax:
@code{Scan}
@end table

If this keyword is specified, @value{MSGED} will automatically scan all
message areas on startup.

@node SoftCrXlat, SortAreas, Scan, Keywords
@subsection SoftCrXlat
@findex SoftCrXlat
@table @asis
@item Syntax:
@code{SoftCrXlat @var{character}}
@item Example:
@code{SoftCrXlat 0x48}
@end table

This configures @value{MSGED} to replace the "soft carriage return" character
(0x8d) with the @var{character} specified as argument to the
@code{SoftCrXlat} keyword when you compose a message or import a file into
the internal editor.  @var{character} specifies the ASCII character with
which to replace, and should be a numeric value between 1 and 255
(decimal). For example, CodePage 866 (Russian) uses SoftCR as letter "H", so
Russian users should define: @samp{SoftCrXlat 0x48}.

@node SortAreas, Squish, SoftCrXlat, Keywords
@subsection SortAreas
@findex SortAreas
@table @asis
@item Syntax:
@code{SortAreas @var{criteria}}
@item Example:
@code{SortAreas NGD}
@end table

Normally, @value{MSGED} displays all message areas in the order in that they
have been defined in the configuration file and/or in the area
files.

With the @code{SortAreas} keyword, you can instruct @value{MSGED} to sort the
areas by certain criteria. The @var{criteria} parameter is a string that
consists of letters each specifying a sort criterium. The leftmost letter is
the most significant. The following letters can be used to define sorting
criteria:

@table @code
@item N
Sort netmail areas on top, then local areas, then echomail areas.
@item T
Sort by area tag.
@item D
Sort by area description.
@item G
Sort by Fastecho group number.
@end table

The meanings of @samp{D} and @samp{T} may vary depending on which area file
you imported the area from.  T is the true area tag, while D is what you
actually see on screen.  You will usually wish to use D, because ordering by
what you see seems to be more logical than ordering by what you don't see.

The @samp{G} criterium does only work with areas imported from a
@file{Fastecho.cfg} files. All other areas have a group value of 0.

@node Squish, SwapPath, SortAreas, Keywords
@subsection Squish

This keyword is described in the section about manual message area definition
(@pxref{Manual Area Definition,, Manual Area Definition}).

@node SwapPath, Switch, Squish, Keywords
@subsection SwapPath
@findex SwapPath
@table @asis
@item Syntax:
@code{SwapPath @var{file-name}}
@item Example:
@code{SwapPath c:\temp\msged.swp}
@end table

Use the filename and path to your swapfile as value vor the @var{file-name}
parameter. This is only for DOS users but it should @emph{definitely} be
used.  If you don't use it, you must return to the Msged directory before
returning to the editor.

@node Switch, Tabsize, SwapPath, Keywords
@subsection Switch

This keyword is explained in the section about configuration switches (@pxref{Switches,,Switches}).

@node Tabsize, Template, Switch, Keywords
@subsection Tabsize
@findex Tabsize
@table @asis
@item Syntax:
@code{Tabsize @var{size}}
@item Example:
@code{Tabsize 8}
@end table

When you enter a message and press the @key{TAB} key, it will be expanded
into the number of white space characters that you have specified as
@var{size} argument to the @code{Tabsize} keyword. @key{TAB} characters in
other messages will not be expanded.

@node Template, TossLog, Tabsize, Keywords
@subsection Template
@findex Template
@table @asis
@item Syntax:
@code{Template @var{file-name}}
@item Example:
@code{Template msged.tpl}
@end table

The template file is used to define standard "hello strings", signoff
messages, and much more. See the provided sample template file for
information on how to do this. Specify the filename of your template file as
the  @var{file-name} parameter to the @code{Template} keyword.

@node TossLog, UserList, Template, Keywords
@subsection TossLog
@findex TossLog
@cindex echotoss log file
@cindex confmail out file
@table @asis
@item Syntax:
@code{TossLog @var{file-name}}
@item Example:
@code{TossLog echotoss.log}
@end table

The log file named @var{file-name} will contain a list of area tags of all
areas into which you have entered messages. Such files are usually named
@var{echotoss.log} or @var{confmail.out} and are used by tossers to
accelerate the scanning process. In @value{MSGED}, the echotoss log file is
updated immediately as soon as you have entered a new message.

@node UserList, UserOffset, TossLog, Keywords
@subsection UserList
@findex UserList
@cindex user list
@cindex fidouser lst file
@cindex lookup, by sysop name
@cindex nodelist lookup, by sysop name
@table @asis
@item Syntax:
@code{UserList @var{filename}}
@item Example:
@code{UserList e:\nodelist\fidouser.lst}
@end table

The fido user list file is a text file that contains all fidonet sysop names
and the corresponding node numbers. It is used for looking up node numbers by
sysop name. A fido user list file is typically named @file{fidouser.lst}. You
can specify up to two fido user list files by repeating the @code{UserList}
keyword.

Note that even when you are using a version 7 lookup, it is still preferable
to also have a @file{fidouser.lst} file and to use the @code{UserList}
keyword, because only the fidouser list file lookup routines of @value{MSGED}
can deal with multiple matching node numbers for one sysop name (they will
present you a list to select from), while the V7 lookup routines currently
cannot do this.

The exact format of a fido user list file is as follows: Each line in this
file must have eactly the same length. Sysop names are left justified and
node numbers are right justified. Node Numbers must come after column 40. The
file must be sorted alphabetically in a way like the C @code{strcmp()}
function would do it.

@node UserOffset, UUCP, UserList, Keywords
@subsection UserOffset
@findex UserOffset
@table @asis
@item Syntax:
@code{UserOffset @var{user-offset}}
@item Example:
@code{UserOffset 0}
@end table

@xref{Name,,The @code{Name} Keyword}, for information about the meaning of
the @var{user-offset} parameter and lastread pointer principles. In contrast
to the @var{user-offset} parameter to the @code{Name} keyword, the
@code{UserOffset} keyword specifies a single user offset numbers for all
names configured in your configuration file. This can be useful if you are
the only person using @value{MSGED}, but want to write under different names
without having different lastread pointer offsets.

@node UUCP, UucpName, UserOffset, Keywords
@subsection UUCP
@findex UUCP
@cindex UUCP gateway address
@cindex e-mail gateway address
@cindex internet gateway address
@table @asis
@item Syntax:
@code{UUCP @var{address}}
@item Example:
@code{UUCP 242:4900/99.0}
@end table

The @var{address} parameter designates the FTN address of the gateway that
your are using to send Internet/Usenet e-mail.
@xref{Internet Gateways,,Using @value{MSGED} for e-mail and newsgroups},
for more information.

@node UucpName,  , UUCP, Keywords
@subsection UucpName
@findex UucpName
@cindex UUCP gateway name
@cindex e-mail gateway name
@cindex internet gateway name
@table @asis
@item Syntax:
@code{UucpName @var{name}}
@item Example:
@code{UucpName UUCP}
@end table

Some Internet gateway software requires that mail addressed to the gateway
must be addressed to a specific user name in order to be gated into the
Internet. This specific user name is usually @samp{UUCP}, and you can specify
it as the @var{name} parameter to the @code{UUCP} keyword.

If your gateway is using a better gateway software, like Fidogate, it will
not have this restriction. Instead, such gateway software uses the name
fields in the FTN header to exchange real name information. In this case, you
should specify @samp{UucpName *}, which tells @value{MSGED} that the gateway
software allows any name to be put into the FTN header field.

@xref{Internet Gateways,,Using @value{MSGED} for e-mail and newsgroups},
for more information.


@node Switches, Conditionals, Keywords, Configuration Reference
@section Switches
@findex Switch
@cindex switches

Switches are used to configure the behaviour of @value{MSGED}. In contrast to
a full configuration keyword, which is used to pass detailed parameters to
@value{MSGED}, a switch toggles a simple state that can be turned on or
off. Switches are usually used to switch certain features on or off.

@menu
* How to use Switches::         How to toggle switches on or off.
* List of Switches::            A complete list of available switches.
@end menu

@node How to use Switches, List of Switches, Switches, Switches
@subsection How to turn switches on and off

To turn a switch on or off, you can use the @code{Switch} keyword, which has
the following syntax:

@example
Switch @var{switch-name} On
Switch @var{switch-name} Off
@end example

The @var{switch-name} parameter must be the name of a valid switch (a
complete list of switches follows below). The first line from above turns the
selected switch on, the second turns it off. (You knew it before, did'nt you?
<g>).

For example, in order to turn the @code{SEEN-BYs} switch on, you would add
the following line to your configuration file:

@example
Switch SEEN-BYs On
@end example

@node List of Switches,  , How to use Switches, Switches
@subsection List of Available Switches

The following switches are available:

@table @code
@item ArealistExactMatch
@findex ArealistExactMatch
When the area list is displayed, you can search a message area by entering the
first few characters of this name. This is the default. If you turn off the
@code{ArealistExactMatch} switch, @emph{any} substring is matched in an area
search; you don't have to type an area name from the beginning. Default: On.

@item ChopQuote
@findex ChopQuote
When set to on, and you are quoting a message for reply, this switch will
cause all quoted lines at the end of the message to be removed (chopped) when
the message is saved.  This works only when using the internal editor. If you
are using an external editor, ChopQuote has no effect.  When set to off, all
quoted lines are saved, regardless of their location in the message.  Note
that you can also manually chop quotes by pressing
@key{Alt}-@key{L}. Default: Off.

@item BS127
@findex BS127
@cindex backspace, on Linux console
Most UNIX consoles (xterm, syscons, and many others) return the ASCII code 8
(@key{Ctrl}+@key{H}) if you press the backspace key, and ASCII code 127 or an
extended escape sequence if you press the @key{Del} key. However, there are
some exceptions, notably the Linux system console. The Linux console returns
ASCII code 127 if you press the backspace key. The result is that the
backspace key behaves like @key{Del} in @value{MSGED}, i.E. it deletes the
character under the cursor instead of the character on the left. As this is
probably not what you want, you can change this behaviour by switching the
@code{BS127} switch on. You will probably want to enclose the @code{Switch
BS127 On} statement in a Conditional that tests if the @code{TERM}
environment variable is set to @code{Linux}. @xref{Conditionals,,Conditional
Statements in the Configuration File}, for more information. Default: Off:

@item Colors
@findex Colors
This switch is only relevant for the Unix versions of @value{MSGED}. If it is
disabled, @value{MSGED} will not send any ANSI color codes to the terminal,
but will restrict itself to the most basic monochrome text styles ``normal'',
``bright'' and ``inverted''. This allows you to use @value{MSGED} on
terminals like the standard xterm, hardware VT100 terminals, and others that
do not understand color codes. Note that you'd better not use the @code{Color}
configuration keyword, nor include any color scheme file, as long as this
switch is disabled. @xref{Colors in the Unix version}, for more
information. Default: Off for Unix, On for all other versions.

@item Confirm
@findex Confirm
@cindex confirmations
By disabling this switch, you will put @value{MSGED} into the ``You asked for
it, you got it!''-mode, that is, you will disable any kind of confirmation
dialog boxes on critical actions like deleting messages, aborting message
entry, and the like. Default: On. (That is, by default, @value{MSGED}
@emph{will} display confirmation requests).

@item DateArvd
@findex DateArvd
If this switch is set to on, the date/time when a message
arrived on your system will be displayed on the right side of the
header information block below the date written information. You might want
to turn this off if your tosser should not fill in this date field
correctly. Default: On.

@item DMore
@findex DMore
When set to on, this will display the message number of the message currently
being read on the top line of the header after the area description in the
form: @samp{(currentmsg# of maxmsg#)}. Default: Off.


@item DomainOrigin
@findex DomainOrigin
If turned on, @value{MSGED} will generate five dimensional origin lines
(i.E., it will append the domain string to the address in the origin
line). It is suggested that you turn this switch off, but is is turned on by
default. Default: On.


@item EchoFlags
@findex EchoFlags
When this switch is set to on, @value{MSGED} will append a FLAGS control line
to messages entered in echomail areas whenever there are message attributes.
For example, entering a private message into an echomail area will cause
Msged to add a @samp{FLAGS PVT} control line to the beginning of the message
text. Do not change this switch unless you know what you are doing. Default:
On.

@item EditCROnly
@findex EditCROnly
If turned on, the internal message editor will mark hard carriage returns
with an ampersand sign. Default: Off.

@item EditTearLines
@item EditOriginLines
When these switches are turned off, the tearline and the origin line will be
appended to an echomail message after you have entered and saved it. When
they are turned on, tearline and/or origin line will be appended to the
message before you start to edit it, so that you have for example the chance
to modify the origin text or similar. Default: Both On.

@item ExtFormat
@findex ExtFormat
Indicates if text created in an external editor should be reformatted by
@value{MSGED}. It is a good idea to leave this on when using an external
editor. Default: On.

@item HardQuote
@findex HardQuote
When switched on, this option causes the column formatting to be preserved
when quoting, i.e. it doesn't reformat quotes. Default: On.

@item ImportFN
@findex ImportFN
When using the built-in editor to  import a text file into a message, this
text file will be bracketet by some horizontal dashes and the name of the
file like this one: @samp{"------ test.txt begins -----"} before and
@samp{"----- test.txt ends -----"} after the file. You can disable these two
lines by turning the @code{ImportFN} switch off. Default: On.

@item LowerCase
@findex LowerCase
@cindex lowercase filenames
@cindex case-sensitive file systems
If you turn the @code{LowerCase} switch on, @value{MSGED} will convert all
file names that it reads from the configuration file or from any areafile to
lower case before it attempts to read to, write from, or create any
file. This might be helpful if you are using case-sensitive file systems like
Linux ext2fs or BSD ufs.

@item MSGIDs
@findex MSGIDs
@cindex MSGID, generation
@cindex message IDs
MSGIDs are used to uniquely identify a message coming from your system.
Unfortunately no two message editors use the same MSGID-generating algorithm,
so you cannot guarantee that you conform to the MSGID specs unless you have
used a specific message editor (only) for a particular address in a 3-year
period.  Most people just ignore this potential problem and use them anyway.
Leaving MSGIDs ON will help mail tossers in duplicate message checking and/or
reply linking. Default: On.

@item NetmailVia
@findex NetmailVia
@cindex via lines
If this switch is turned on, @value{MSGED} will append a Via control line to
each netmail entered. You should turn this switch on, if your tosser does not
append Via lines to netmail that originates from your system (like Squish
does), but you should switch it off if your tosser does append via lines to
netmail even if the mail originates from your own system (like Fastecho
does).

@item OpusDate
@findex OpusDate
The old MsgEd documentation states differently, but judging from the source
code, turning this flag @emph{on} would @emph{stop} @value{MSGED} from
@emph{reading} the Opus date_written and date_arrived date fields of Fido
*.MSG messages. @value{MSGED} will, however, always fill in those fields (in
the worst case with the current timestamp). Probably you should leave this
flag as is. Default: Off.

@item Origins
@findex Origins
This switch controls if echomail messages will be appended with an origin
line. You absolutely @emph{must} leave this switch turned on, because origin
lines are technically necessary for a smooth operation of the
network. Default: On.

@item QQuotes
@findex QQuotes
This switch controls how @value{MSGED} will modify the quote string when
quoting text that already is quoted. When turned on, @value{MSGED} will try
to add another @samp{>} character to the existing quote strings. If turned
off, @value{MSGED} will not modify existing quote strings and thus behave
much like Maximus 2.0 or TimEd do. Default: On.

@item RawCC
@findex RawCC
@cindex carbon copies, saving the raw original message
This switch is only of relevance if the @code{SaveCC} switch is turned on.
Then, if @code{RawCC} is on, the raw cc:  msg is saved (along with the cc:
header that you typed in, so that if you re-edit the message, also all carbon
copies will be re-generated). Otherwise, the first formatted cc:  will NOT be
marked kill/sent and will therefore remain as a future reference, but the
original raw message will not be saved. Default: On.

@item RealMsgN
@findex RealMsgN
If this switch is turned on, the message list screen (@key{Alt}-@key{L}) will
display the actual message number of each message instead of displaying the
messages in sequential order, starting with 1. Default: Off.

@item RightNextUnreadArea
@findex RightNextUnreadArea
When in message reading mode, and this switch is set to on, and there are no
more unread messages in the current message area, pressing the right arrow
key will go to the next area with unread messages. Default: Off.

@item SaveCC
@findex SaveCC
@cindex carbon copies, saving the original message
When generating carbon copies, and if this switch is turned on, a duplicate
of the original message is saved with no kill/sent flag set for future
reference, and possible re-editing and/or resending (along with the normal
copied messages that are sent out and flagged kill/sent). Default: On.

@item Seen-Bys
@findex Seen-Bys
This switch is a synonym for the @code{ShowSeenBys} switch. See below.

@item Shadows
@findex Shadows
If this switch is enabled, @value{MSGED} will draw nice shadows round dialog
boxes and other popup windows. You might want to disable this switch if you
use the Unix version of @value{MSGED}, because on a VT100 compatible
terminal, drawing those borders can slow down the program
considerably. Default: On.

@item ShowAddr
@findex ShowAddr
If this switch is enabled, the FTN address that you are currently using for
the current area will be displayed on the left-hand side of the line that
separates the message header from the message text. Default: On.

@item ShowCR
@findex ShowCR
If turned on, @value{MSGED} will mark the location of hard carriage
returns with ASCII code 20, as known from common word processors. This might
not work on a VT100 terminal. Default: Off.

@item ShowEOL
@findex ShowEOL
If turned on, @value{MSGED} will mark the location of each end-of-line
character with ASCII code 29. This will only work if the @code{ShowCR} switch
is also turned on. Default: Off.

@item ShowNotes
@findex ShowNotes
@cindex kludge lines, displaying
@cindex notes, displaying
If turned on, @value{MSGED} will display kludge line information in message
reading mode. You can also toggle this switch during program execution by
pressing @key{Alt}-@key{V}. Unlike in older MsgEd versions, this switch
does not pertain to origin and/or tear lines. Default: Off.

@item ShowOrigins
@findex ShowOrigins
This switch toggles the display of origin lines in message reading
mode. Default: On.

@item ShowSystem
@findex ShowSystem
This enables the lookup and display of a system name in your compiled version
7 nodelists. If set to on, the nodelisted system name will appear in the
header, after the sender's name and address, in netmail and echomail message
areas. If switched off, the lookup will not be performed. Default: On.

@item ShowTearlines
@findex ShowTearlines
This switch toggles the display of tearlines in message reading
mode. Default: On.

@item ShowSeenBys
@findex ShowSeenBys
@cindex SEEN-BY lines, showing
If this switch is turned on, @value{MSGED} will display SEEN-BY lines in
message reading mode. This is probably only useful for echomail routing
debugging purposes. Default: Off.

@item ShowTime
@findex ShowTime
Shows the current time.  This isn't a real time clock; it simply shows what
the current date and time were when the screen was last refreshed with a new
message, or when other keyboard hits were detected.  Default: Off.

@item SOTEOT
@findex SOTEOT
@cindex start of text / end of text
If this is set to on, @value{MSGED} will add SOT and EOT (Start Of Text/End
Of Text) kludge lines to bracket the text in the message body. Please note
that Paul Edwards' SOT/EOT specification does not permit domains in echomail
origin lines.  If both the @code{DomainOrigin} and @code{SOTEOT}
configuration switches are enabled, @value{MSGED} will exit and suggest to
disable one or the other. Default: Off.


@item SquishLock
@findex SquishLock
@cindex locking the message base, for performance reasons
@cindex message base locking, for performance reasons
If the @code{SquishLock} switch is turned on, @value{MSGED} will lock every
message area that is entered (and of course unlock it when it is left), thus
effectively denying access to this area to any other program. This will
result in a considerable speed increase when browsing message areas, but it
has the drawback that the tosser will not be able to toss to an message area
as long as it is open in @value{MSGED}. Also, some other problems have been
observed with this switch in network environments. So you'd best leave this
switch off unless you are running your Fido system on a non-networked, single
tasking DOS machine.

Note that this switch has nothing to do with data integrity concerns. MsgEd
will of course lock the Squish Message Base when writing a message in order
to insure data integrity even if the SquishLock switch is turned off.

The default value of the SquishLock switch is Off (in contrast to the
mainstream MsgEd 4.30, where it is turned on by default).

@item StatBar
@findex StatBar
Shows a status bar along the bottom of the screen. Default: On.

@item Tearlines
@findex Tearlines
@cindex tearlines, disabling
This switch controls if echomail messages will be appended with a tear
line (three consecutive dashes) or not. You should leave this switch
on. Default: On.

@item UseLastr
@findex UseLastr
You should leave this switch turned on. It instructs @value{MSGED} to use the
lastread pointer for Fido *.MSG style areas. On the other hand, turning this
switch off probably does not disable @emph{all} lastread pointer handling
code in @value{MSGED} @dots{} Older @value{MSGED} versions had this switch
turned off by default and it was undocumented. Hence a lot of problems with
lastread pointers in those versions @dots{} Default: On.

@item UseMouse
@findex USeMouse
Some features of @value{MSGED} can be controlled through the
use of a mouse.  This switch tells Msged whether or not you're using one.
Note that the Windows NT and the Unix versions of @value{MSGED} presently do
not support a mouse at all. - Default: On.

@item UsePID
@findex UsePID
If this switch is turned on, @value{MSGED} will put its version information
in a @@PID kludge line, and leave the tearline blank. If turned off,
@value{MSGED} will not generate a @@PID kludge, but put its version
information in the tera line. Default: Off.

@end table

@node Conditionals, Area Definitions, Switches, Configuration Reference
@section Conditional Statements in the Configuration File
@cindex conditionals
@cindex environment variables, testing
If you use @value{MSGED} with the same configuration file on different
operating systems, you will probably want to make some settings in the
configuration file dependent on the environment you are currently running
in. This is where @dfn{Conditionals} come into place. A Conditional can be
used to include a certain part of the configuration file only if a certain
version (OS/2, DOS, ...) of @value{MSGED} is running, or only if an environment
variable has a certain value.

@menu
* Statements: cond-statements.  Formulating Conditional Statements.
* Conditions: cond-conditions.  Conditions that can be tested.
* cond-examples::               
@end menu

@node cond-statements, cond-conditions, Conditionals, Conditionals
@subsection Formulating Conditional Statements
The easiest form of a Conditional is as follows:

@example
IF @var{condition}
  @var{configuration statements @dots{}}
ENDIF
@end example

The @var{condition} parameter can simply be an operating system name like
@samp{OS/2} or @samp{Linux}. You will soon see other conditions that can be
formulated (@pxref{cond-conditions, Conditions that can be tested}). For the
moment, we will always use operating system names as conditions.

For example, the following statement will only be evaluated on OS/2:

@example
IF OS2
   Editor c:\boxer\b2.exe
ENDIF
@end example

In addition, you can specify that an alternate block of statements should be
evaluated if the condition was not true:

@example
IF OS2
   ;OS/2 version of the Boxer Editor
   Editor c:\boxer\b2.exe
ELSE
   ;DOS version of the Boxer Editor
   Editor c:\boxer\b.exe
ENDIF
@end example

If you want to test for multiple configurations, the ELSEIF statement is
handy. Instead of writing a complicated statement like

@example
IF OS2
  Editor c:\boxer\b2.exe
ELSE
  IF UNIX
    Editor /usr/bin/vi
  ELSE
    ;Must be DOS
    EDITOR c:\boxer\b.exe
  ENDIF
ENDIF
@end example

you can simply write:

@example
IF OS2
  Editor c:\boxer\b2.exe
ELSEIF UNIX
  Editor /usr/bin/vi
ELSE
  Editor c:\boxer\b.exe
ENDIF
@end example

For compatibility with other Fidonet editors, the @code{ELIF} command can be
used instead of the @code{ELSEIF} command.

As you might already have guessed from the examples, conditionals can be
nested down to any depth, that is, inside an @code{IF} - @code{ENDIF} -
block, you can start another @code{IF} block, and so on.


@node cond-conditions, cond-examples, cond-statements, Conditionals
@subsection Conditions that can be tested
We already saw that operating system names can be used as conditions for the
@code{IF} command. Below, you see the complete list of conditions that can be
used:

@table @code
@item IF OS2
@itemx IF OS/2
These conditions are true if you are running the OS/2 version of @value{MSGED}

@item IF DOS
These conditions are true if you are running any DOS version (16 bit or 32
bit) of @value{MSGED}.

@item IF DOS16
This condition is true if you are running the standard 16 bit DOS version of
@value{MSGED}.

@item IF 386
This condition is true if you are running the 32 bit DOS version of @value{MSGED}.

@item IF W32
This condition is true if you are running the Windows 95/98/NT version of
@value{MSGED}.

@item IF UNIX
This condition is true if you are running any Unix version (Linux, FreeBSD,
AIX, Rhapsody, ...) of @value{MSGED}.

@item IF LINUX
This condition is true for any version of @value{MSGED} that announces itself
as @samp{MsgEd/LNX TE}.

@item IF 0
This condition is always false. It is useful if you want to disable a large
part of the configuration file, but do neither want to erase it nor to place
semicolons in front of each line. Simply place @code{IF 0} and @code{ENDIF}
around such a part of the configuration file.

@item IF 1
This condition is always true.

@item IF @var{variable}=@var{value}
This condition is true if the specified environment @var{variable} has the
specified @var{value}. For example, on OS/2, @code{IF HOSTNAME=mycomputer}
will be true only if you have @code{set HOSTNAME=mycomputer} in your
@file{config.sys} file, or if you have given the @code{set
HOSTNAME=mycomputer} command on the command line before starting
@value{MSGED}.

@end table

@node cond-examples,  , cond-conditions, Conditionals
@subsection Usage example for Conditionals
Here are some more useful examples for Conditionals in the configuration
file:

@table @asis
@item Specifying a swap file for the 16 bit version:
@example
IF DOS16
  Swappath c:\temp\msged.swp
ENDIF
@end example

@item Selecting the proper Origin string:
@example
IF OS2
  Origin "Warp 4, Mister Sulu!"
ELSEIF W32
  Origin "My employer forces me to use Windows ..."
ELSEIF DOS
  Origin "DOSwidanja!"
ELSEIF UNIX
  IF LINUX
    Origin "Penguins ahead!"
  ELSE
    Origin "UNIX - a professional's choice"
  ENDIF
ENDIF
@end example

@item Fine-tuning the terminal setup on Unix
@example
IF UNIX

  ;By default, switch colors off (might cause problems with
  ;VT100 and xterm), as well as shadows (too slow)

  Switch Shadows Off
  Switch Colors Off

  IF TERM=linux
    ;The peculiarities of the Linux console ...
    switch bs127 on
    switch colors on
  ENDIF

  IF TERM=vt220
    switch colors on
  ENDIF

  IF TERM=ansi
    switch colors on
  ENDIF

ENDIF
@end example

@end table

@node Area Definitions,  , Conditionals, Configuration Reference
@section Defining Message Areas
@cindex definining message areas
@cindex message area definition
@cindex area definition

One of the most important tasks in configuring @value{MSGED} is to tell it
where it can find the message areas that you wish to read and to write
to. There are basically two ways to do this: You can either manually define
each area in the configuration file using the @code{Quick}, @code{Fido} and
@code{Squish} keyword, or you can tell @value{MSGED} to read in the
configuration file of your tosser. The latter method saves you much work, but
sometimes you will ned to use the manual method to do some fine-tuning.

It is advisable to put all keywords that have to do with area configuration
at the end of your configuration file, because other keywords (like
@code{QuickBbsPath}, @code{MountDir}, et. al.) that change the behaviour of
the area definition keywords will only work if they are read in before the
area definition keywords.

@menu
* Manual Area Definition::      Configuring areas one by one.
* Areafile Parsing::            Reading all areas from a tosser config file.
@end menu

@node Manual Area Definition, Areafile Parsing, Area Definitions, Area Definitions
@subsection Manual Area Definition
@findex Squish
@findex Quick
@findex Fido

You can manually define a message area by putting a line of the following
format into your configuration file:

@example
@var{format} @var{flags} "@var{description}" @var{path} @var{areatag} [@var{address}]
@end example

Except for the @var{address} parameter, all parameters are mandatory. The
meaning of these parameters is as follows:

@table @var
@item format
The @var{format} parameter tells the message base format this message area is
held in. It can be either @samp{Fido}, designating a message area in Fido
*.MSG file format, @samp{Quick}, desingating a message area held in a
QuickBBS or Hudson Message Base, or @samp{Squish}, designating a message area
in the Squish format.

@item flags
The @var{flags} parameter is a sequence of characters where each character is
a flag that toggles a certain option. The following flags can be used:

@enumerate
@item
Flags that specify the message area type. You have to use exactly one of
those:

@format
@code{m} - netmail area,
@code{e} - echomail area,
@code{l} - local mail area.
@end format

@item
Flags that toggle certain special features of @value{MSGED}. All of these
flags are optional. @xref{Advanced Concepts}, for more information on the
meaning of these flags.

@format
@code{8} - allow 8 bit characters with the proper @code{@@CHRS} kludge,
@code{u} - enable internet gateway support for this area,
@code{n} - this flag is obsolete.
@end format

@item
Default message attributes for messages written in this area. You should
specify @samp{p} for netmail areas. The @samp{loc} flag will always be set,
so you can't specify it here.

@format
@code{p} - private,
@code{h} - hold,
@code{k} - kill/sent,
@code{d} - direct.
@end format

@end enumerate

@item description
The @var{description} parameter specifies the name under which the area will
appear in the area selection screen. It may contain white spaces if you place
it between quotation marks.

@item path
The @var{path} parameter gives the location of the message area. For Fido *.MSG
areas, this is the path name of the corresponding directory. For QuickBBS
areas, it is the area number. For Squish areas, it is the base name of the
area files without extension.

@item areatag
The @var{areatag} parameter gives the official area tag of this area. You
@emph{must} specify this parameter for echomail areas, and you @emph{must
not} specify this for netmail areas!

@item address
Finally, the @var{address} parameter specifies the FTN address to use for
this area. You must use this for othernet areas where you must use an AKA
different to your main AKA.

@end table

Here are some examples:

@example
Fido   mup "Fidonet Netmail" e:\fido\netmail   2:2476/418.0
Squish eu  "MsgEd Support"   e:\fido\sq\msged  MSGED_ECHO 
Squish eu8 "OS/2 Debate"     e:\fido\sq\os2deb OS2.DEBATE.GER
Squish eu  "c't conference"  e:\fido\sq\ctger  CT.GER  21:492/2851.0
Quick  lp  "To Sysop Area"   1
@end example

@node Areafile Parsing,  , Manual Area Definition, Area Definitions
@subsection Reading a Tosser Configuration File (Areafile)
@findex Areafile
@cindex tosser configuration, parsing
@cindex area file, of tosser

This keyword is used to tell @value{MSGED} to read information about netmail
and echomail areas from a tosser configuration file. This saves you from
double work: You only have to declare an area once in the tosser
configuration file, and MsgEd will automatically always display all areas
that are configured in your tosser configuration file. The syntax is as
follows:

@example
@code{Areafile @var{type} @var{filename}}
@end example

The @var{type} parameter designates the type of tosser configuration file to
use. It can be @samp{Squish}, @samp{Fastecho} or @samp{AreasBBS}. The
@var{filename} parameter specifies the path and file name of the tosser
configuration file that should be read. (Plase note that only the area
definitions from a Squish configuration file will be read. If the Squish
configuration file references another @file{areas.bbs} file, you have to
define it separately for @value{MSGED} using a second @code{Areafile}
statement).

There is one problem with reading echo definitions from tosser configuration
files: Those files do not contain all information that can be specified in a
manual area configuration. Certain features of @value{MSGED} need a flag that
has to be set for each area in order to enable that feature.  For example, in
order to be able to write mails with umlauts, you must set the 8 flag for
each area that should have umlauts.

@findex AreaFileFlags
Therefore, the @code{AreaFileFlags} keyword has been introduced. It's syntax
is as follows:

@example
AreaFileFlags @var{flags}
@end example

The @var{flags} parameter has the same syntax as the @var{flags} parameter of
the @code{Fido}, @code{Quick} and @code{Squish} keywords (@pxref{Manual Area
Definition,,Manual Area Definition}). You must specify the
@code{AreaFileFlags} keyword before the @code{AreaFile} keywords. Then, all
areas imported from the area files will have the specified @var{flags}.

If you want only a few, but not all areas form an areafile to have some
flags, you can manually redefine areas with the syntax described in the
preceding section. For this to work, the manual redefinition must come
@emph{after} the @code{AreaFile} keyword. Vice versa, if you want almost all
areas from an areafile to have a certain flag, but want a few exemptions, you
should use the @code{AreaFileFlags} and @code{AreaFile} keywords to import
all areas from the areafile with the specific flag set. After that, you can
redefine some areas manually without this flag.

Note: Using @code{AreaFileFlags} to globally turn on the @samp{u} flag
probably won't hurt you. On the other hand, you should only use
@code{AreaFileFlags} to globally turn on the @samp{8} flag if you know that
the moderators of the echo areas that you are posting in do not forbid
8-bit-codes.

@node Compiling, Concept Index, Configuration Reference, Top
@appendix Compiling the Source Code
@cindex source code
@cindex compiling the source code
This appendix provides information on how to compile the source code of
@value{MSGED}. You will have to do this if either you are using a platform
for which no binary distribution is provided (like FreeBSD, AIX, Rhapsody,
and other Unix systems), or if you want to do modifications on the source
code, or if you are just curious :-).

Most of the information of this chapter applies to all supported platfroms
(including Unix, OS/2, Windows and DOS). 

@menu
* Preparations::                Obtaining and unpacking the files.
* Configuring::                 Selecting the proper Makefile.
* Building the Executables::    Invoking the compiler.
* Building the other Files::    Compiling the manual and help files.
* Installing::                  Installing the files you have created.
@end menu 

@node Preparations, Configuring, Compiling, Compiling
@section Step 1: Preparing the build directories; Obtaining the SMAPI
Besides the source code of @value{MSGED}, which is supplied in
@file{MSGTE5_S.ZIP}, you need the source code of the special edition of the
Squish Message API, from here on called @dfn{Smapi}, that is required to build
@value{MSGED}.

Unfortunately, there are a lot of different versions of the Smapi floating
around. The best choice would be if you would use the snapshot of exactly that
release level of the Smapi that I used to compile the binary releases. It can
be found as @file{SMAPISS.ZIP} on all sites that carry the @value{MSGED}
source code. Alternatively, you can use any @emph{newer} Smapi from the same
development stream, which is made available on a regular basis by Michael
Espey for file request and by Thomas Winter for non-anonymous CVS checkout. -
All other versions of the Smapi or the Msgapi32 are probably not suited for
building @value{MSGED}. They are definitely not suited if you want to compile
for Unix.

After you have obtained @file{SMAPISS.ZIP} and @file{MSGTE5_S.ZIP}, unzip
them into two directories at the same level.  The files in the archives stick
to the 8.3 notation, so you can even do this on FAT drives. You should use
either Info-ZIP for unpacking these files, or use pkunzip with the @samp{-d}
option, because the @value{MSGED} archives contains subdirectories.

On OS/2, this could look  as follows:

@example
[C:\] mkdir compile
[C:\] mkdir compile\smapi
[C:\] mkdir compile\msged
[C:\] cd compile\msged
[C:\COMPILE\MSGED] unzip c:\download\msgte5_s.zip
[C:\COMPILE\MSGED] cd ..\smapi
[C:\COMPILE\SMAPI] unzip c:\download\smapiss.zip
@end example

while on Unix, it would look like this:

@example
  $ cd ~
~ $ mkdir smapi
~ $ mkdir msged
~ $ cd msged
~/msged $ unzip ~/downloads/msgte5_s.zip
~/msged $ cd ../smapi
~/smapi $ unzip ~/downloads/smapiss.zip
@end example

@node Configuring, Building the Executables, Preparations, Compiling
@section Configuring - Selecting the proper Makefile for your Compiler
@value{MSGED} does not provide a @code{configure} skript. It rather provides
a set of different makefiles. You ``configure'' the source code by simply
renaming the makefile of your choice to @file{makefile}. You have do to this
in both the @file{smapi} and the @file{msged} directory. For instance, on
OS/2 with IBM C, you would use:

@example
[C:\COMPILE\SMAPI] copy makefile.ibo makefile
[C:\COMPILE\SMAPI] copy ..\msged\makefile.ibo ..\msged\makefile
@end example

while on Unix, you would use:

@example
~/smapi $ cp makefile.unx makefile
~/smpai $ cp ../msged/makefile.unx ../msged/makefile
@end example

The following compilers and target operating systems are supported:

@example
Makefile     | Platform                 
-------------+-----------------------------------------
makefile.bcd | DOS with Borland C++ 3.1 or Turbo C  
makefile.bco | OS/2 with Borland C 2.0
makefile.bcw | Windows 95/NT with Borland C++ 4.0
makefile.djg | DOS/386 with DJGPP GCC 2.7.2
makefile.emo | OS/2 with EMX 0.9c GCC 2.7.2
makefile.ibo | OS/2 with IBM CSET/2 or Visual Age C++
makefile.rxw | 95/NT with RSXNT + EMX GCC 2.7.2 
makefile.unx | Any UNIX, BSD or Linux with any compiler
@end example

The following makefiles are also provided, but they are not supported, either
because I do not have the appropriate compilers or because I cannot give
support for some special features they are using. I try to update these
makefiles along with the others, but I cannot make any promises.

@example
Makefile     | Platform
-------------+----------------------------------------------
makefile.bsd | FreeBSD with GCC; links the SMAPI dynamically
makefile.hco | OS/2 with Metware High C 
makefile.lnx | Linux with GCC; links the SMAPI dynamically
makefile.qcd | DOS with MS Quick C      
makefile.wcd | DOS with Watcom C     
makefile.wcw | NT with Watcom C
makefile.wco | OS/2 with Watcom C
makefile.wcx | DOS/386 with Watcom C
@end example

Special note: Linux and FreeBSD users should, for the first try, use
@file{makefile.unx} rather than @file{makefile.lnx}
resp. @file{makefile.bsd}. @file{makefile.unx} is idiot proof: it statically
links the Smapi, and it works on any Unix-like system that has any half Posix
compliant "cc" available.

The files @file{makefile.lnx} and @file{makefile.bsd} should @emph{only} be
used if you want to link the Smapi dynamically, and if you know what that
means and what you are doing

If you are annoyed by the executable generated with @file{makefile.unx}
annouces itself as @samp{MsgEd/UNX} rather than @samp{MsgEd/LNX}, you can
edit the @code{UNAME} preprocessor define in @file{makefile.unx}.

@node Building the Executables, Building the other Files, Configuring, Compiling
@section Building the Executables
Now that you have done all necessary preparations, compilation is easy:

@enumerate
@item Change into the @file{smapi} directory and type @code{make}. This will
generate a library, whose name depends on the makefile you used. For instance
@file{libsmapiunx.a} or @file{smapiibo.lib}.

@item Change into the @file{msged} directory and type @code{make}. This will
gnereate the executable, whose name depends on the makefile you used. For
instance @file{msgedp.exe} or @file{msged} or @file{msged.exe}.

@item If, on Unix, you get errors about unresolved symbols when linking the
@value{MSGED} executable, change into the Smapi directory and run
@code{ranlib smapiunx.a}. Then change back to the Msged directory and try
again.
@end enumerate

@node Building the other Files, Installing, Building the Executables, Compiling
@section Compiling the help file, the charset files and the documentation

After you have created the executables, you need to create some other files,
namedly the compiled online help file, the character set translation files,
and the manual.

To compile the help file, call the @value{MSGED} executable with the
@samp{-hc <infile> <outfile>} options. On OS/2:

@example
[C:\COMPILE\MSGED] msgedp -hc msghelp.src msghelp.dat
@end example

and on Unix:

@example
~/msged $ ./msged -hc msghelp.src msghelp.dat
@end example

In order for @value{MSGED} to behave smoothly in environments where mails
with special national characters are received and/or transmitted (i.E.:
everywhere in Europe), you must create @file{readmaps.dat} and
@file{writmaps.dat} files @emph{that match your local character map
settings}. On Unix, this is easily done thanks to the shell expansion
feature:

@example
~/msged $ cd ~/msged/maps
~/msged/maps $ gcc -o makemaps makemaps.c
~/msged/maps $ ./makemaps LATIN-1 *.CHS *.chs
@end example

(If you have misconfigured your Unix to use CP850 or CP437 instead of
ISO-9660, you should enter @samp{IBMPC} instead of @samp{LATIN-1} in the
example above).

On OS/2, DOS and NT it is a little more cumbersome. First, you have to
compile the @file{makemaps.c} file with your C compiler. Then, you have to
specify all character map files that are to be included into
@file{readmaps.dat} and @file{writmaps.dat} manually:

@example
[C:\COMPILE\MSGED] cd c:\compile\msged\maps
[C:\COMPILE\MSGED\MAPS] icc makemaps.c
 (...)
[C:\COMPILE\MSGED\MAPS] makemaps IBMPC IBM_ISO.CHS ISO_IBM.CHS 
IBM_ASC.CHS IBM_MAC.CHS MAC_IBM.CHS IBM_850.CHS 850_IBM.CHS
@end example

Finally, you may want to create the documentation in your favourite output
format. This requires quite some prerequisite software to be installed on
your system, so you probably might simply want to grab @file{MSGTE5_M.ZIP}.

But if you really want to compile the manual by hand, proceed as follows:
Change to the @file{doc/manual} subdirectory:

@example
[C:\COMPILE\MSGED\MAPS] cd \compile\msged\doc\manual
@end example

or on Unix:

@example
~/msged/maps $ cd ~/msged/doc/manual
@end example

There, you have various options. You can type:

@table @code
@item make info
This creates the documentation in GNU info format. It requires the
@file{makeinfo} tool to be installed, and the @file{info} viewer for
viewing. Both should be part of any modern Unix installation. For OS/2, they
can be found in @file{GNUINFO.ZIP}

@item make html
This creates the documentation in HTML format. This requires Perl 5 to be
installed as well as the texi2html.pl perl script. (The latter script does
also work on OS/2 with the Perl for OS/2 port).

@item make dvi
This creates the documentation in DVI format. DVI can be converted to PS with
dvips and yields a very high-quality output. However, this requires a working
TeX installation and the @file{texi2dvi} shell script. (On OS/2, you need
pdksh for executing the script and EmTeX. With a little manual work, it can
also be done with Juergen Kleinboehls OS2TeX.

@item make inf
This creates the documentation in OS/2 INF format. It requires a Texi2Ipf
tool as well as the IPFC compiler (which only runs on OS/2).

@end table

@node Installing,  , Building the other Files, Compiling
@section Installing
You have now created all files that are necessary to install
@value{MSGED}. @xref{Installation,,Installation Procedures and Release
Notes}, for information on how to install these files.

@node Concept Index, Keyword Index, Compiling, Top
@appendix General Index
@printindex cp

@node Keyword Index,  , Concept Index, Top
@appendix Configuration File Keyword Index
@printindex fn

@contents
@bye
